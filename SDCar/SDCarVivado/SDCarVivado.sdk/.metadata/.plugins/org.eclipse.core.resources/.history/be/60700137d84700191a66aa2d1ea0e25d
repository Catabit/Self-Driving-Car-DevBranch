#include "PN532_rfid.h"

int main() {
	int fd = init();
	uint32_t versiondata = getFirmwareVersion(fd);
	if (versiondata < 0) {
		printf("Didn't find PN53x board\n");
		return -1; // halt
	}

	printf("Found chip PN5"); printf("%x\n", (versiondata>>24) & 0xFF);
	printf("Firmware ver. "); printf("%d", (versiondata>>16) & 0xFF);
	printf("."); printf("%d\n", (versiondata>>8) & 0xFF);

	if (SAMConfig(fd)!=1) {
		printf("Can't configure SAM\n");
		return -1;
	}

	printf("Configured SAM\n");

	uint8_t success;
	uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer to store the returned UID
	uint8_t uidLength;
	uint16_t runtime = 10;

	sleep(1);
	printf("You can now use cards\n");


	success = 0;
	while (runtime>0) {
		success = readPassiveTargetID(fd, PN532_MIFARE_ISO14443A, uid, &uidLength, 1000);
		printf("Tried to read card, %d\n", success);
		if (success==1)
		{
			runtime=10;
			printf("Found an ISO14443A card\n\tUID Length: %d bytes\n\tUID Value: ", uidLength);
			PrintHex(uid, uidLength);
			printf("\n");

			int block = 4;
			if (uidLength == 4)
			{
				uint8_t keya[6] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
				success = mifareclassic_AuthenticateBlock(fd, uid, uidLength, block, 0, keya);

				if (success==1) {
					//write
					uint8_t data[16] = { 'a', 'd', 'a', 'f', 'r', 'u', 'i', 't', '.', 'c', 'o', 'm', 0, 0, 0, 0};
					//success = mifareclassic_WriteDataBlock(fd, block, data);

					//read
					success = mifareclassic_ReadDataBlock(fd, block, data);

					if (success==1) {
						// Data seems to have been read ... spit it out
						printf("Reading Block 4:\n");
						PrintHexChar(data, 16);

						// Wait a bit before reading the card again

					}
					else
						printf("Ooops ... unable to read the requested block.  Try another key?\n");

				}
				else
					printf("Ooops ... authentication failed: Try another key?\n");
			}
			sleep(1);
		}
		else{
			sleep(1);
			runtime-=1;
		}

	}


	close(fd);
}

