#ifndef CHARVIDEODEV_H_
#define CHARVIDEODEV_H_

#include "vdmadriver.h"



struct charvideo_dev {
	int dev_major;
	struct file_operations fops;
	struct vdmaDriver_local *lp;
	struct cdev cdev;	  /* Char device structure		*/
};

ssize_t charvideo_read(struct file *filp, char __user *buf, size_t count,
                loff_t *f_pos)
{
	struct charvideo_dev *dev = filp->private_data;

	if (*f_pos >= dev->size)
		return 0;
	if (*f_pos + count > dev->size)
		count = dev->size - *f_pos;

	//do read

	vdma_s2mm_status_dump(dev->lp->vdmactrl);


	/*if (copy_to_user(buf, localbuffer, count)) {
		return -EFAULT;
	}*/

	*f_pos += count;
	return count;

}

int charvideo_open(struct inode *inode, struct file *filp)
{
	struct charvideo_dev *dev; /* device information */

	dev = container_of(inode->i_cdev, struct charvideo_dev, cdev);
	filp->private_data = dev; /* for other methods */

	return 0;          /* success */
}



/*
 * Finally, the module stuff
 */

/*
 * The cleanup function is used to handle initialization failures as well.
 * Thefore, it must be careful to work correctly even if some of the items
 * have not been initialized
 */
void charvideo_delete(struct charvideo_dev *dev)
{
	dev_t devno = MKDEV(dev->dev_major, 0);

	cdev_del(&dev.cdev);

	kfree(dev);

	unregister_chrdev_region(devno, 1);
}


/*
 * Set up the char_dev structure for this device.
 */
static void charvideo_setup_cdev(struct charvideo_dev *dev)
{
	int err, devno = MKDEV(scull_major, 0);

	cdev_init(&dev->cdev, &dev->fops);
	dev->cdev.owner = THIS_MODULE;
	dev->cdev.ops = &dev->fops;
	err = cdev_add (&dev->cdev, devno, 1);
	/* Fail gracefully if need be */
	if (err)
		printk(KERN_NOTICE "Error %d adding charvideo", err);
}

struct charvideo_dev* charvideo_alloc(){
	struct charvideo_dev *local;

	local = kmalloc(sizeof(struct charvideo_dev), GFP_KERNEL);
	if (!local)
		return NULL;

	return local;
}


int charvideo_init(struct charvideo_dev *device, struct vdmaDriver_local *lp)
{
	int result;
	dev_t major = 0;

	result = alloc_chrdev_region(&major, 0, 1, "charvideo");

	device->dev_major = MAJOR(major);
	if (result < 0) {
		printk(KERN_WARNING "charvideo: can't get major %d\n", device->dev_major);
		return result;
	}

	device->lp = lp;

	//set the fops
	device->fops.read=charvideo_read;
	device->fops.open=charvideo_open;

	charvideo_setup_cdev(device);

	return 0; /* succeed */
}


#endif
