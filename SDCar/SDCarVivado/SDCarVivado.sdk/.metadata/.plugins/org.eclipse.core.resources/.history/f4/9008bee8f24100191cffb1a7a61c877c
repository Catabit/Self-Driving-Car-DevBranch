/*
 * Triple buffering example for Xilinx VDMA v6.2 IP-core,
 * loosely based on Ales Ruda's work.
 *
 *  Created on: 17.3.2013
 *      Author: Ales Ruda
 *         web: www.arbot.cz
 *
 *  Modified on: 18.12.2014
 *       Author: Lauri Vosandi
 *          web: lauri.vosandi.com
 */

#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <uiotools/uiotools.h>
#include "cameraiic.h"


//#include "charvideo_ioctl.h"
//#######################################

#include <linux/ioctl.h>

#define CHARVIDEO_IOC_MAGIC  '8'

#define CHARVIDEO_IOCHALT    _IO(CHARVIDEO_IOC_MAGIC, 0)
#define CHARVIDEO_IOCSTART    _IO(CHARVIDEO_IOC_MAGIC, 1)
#define CHARVIDEO_IOCSTATUS    _IO(CHARVIDEO_IOC_MAGIC, 2)

#define CHARVIDEO_IOCQHEIGHT _IOR(CHARVIDEO_IOC_MAGIC,  3, int)
#define CHARVIDEO_IOCQWIDTH _IOR(CHARVIDEO_IOC_MAGIC,  4, int)
#define CHARVIDEO_IOCQPIXELLEN _IOR(CHARVIDEO_IOC_MAGIC,  5, int)
#define CHARVIDEO_IOCQBUFSIZE _IOR(CHARVIDEO_IOC_MAGIC,  6, int)

#define CHARVIDEO_IOC_MAXNR 6

//########################################

#define WIDTH 1280
#define HEIGHT 720

#define CSI_2_RX_NAME "MIPI_CSI_2_RX"
#define D_PHY_RX_NAME "MIPI_D_PHY_RX"
#define MIPI_MAP_SIZE 0x10000


#define IMAGEDUMP
#define BURSTDUMP 5



void pixelSplit(uint32_t pixel10bit, int rLeftOffset, uint8_t *r, uint8_t *g, uint8_t *b) {
	//(2bit unused)(8bit red)(2bit unused)(8bit blue)(2bit unused)(8bit green)(2bit unused)
	int gLeftOffset = rLeftOffset+10;
	int bLeftOffset = rLeftOffset+20;

	uint16_t temp = ((pixel10bit<<rLeftOffset) >> (32-10-rLeftOffset));
	*r = temp;

	temp = ((pixel10bit<<gLeftOffset) >> (32-10-rLeftOffset));
	*b = temp;

	temp = ((pixel10bit<<bLeftOffset) >> (32-10-rLeftOffset));
	*g = temp;
}


int main() {

    //Reset the MIPI video pipeline
	int fd;
	void *ptr;

	fd = findDeviceByName(CSI_2_RX_NAME);
	ptr = mmap(NULL, MIPI_MAP_SIZE, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
	*((unsigned *)(ptr)) = MIPI_PIPELINE_ENABLE;
	munmap(ptr, MIPI_MAP_SIZE);
	close(fd);

	fd = findDeviceByName(D_PHY_RX_NAME);
	ptr = mmap(NULL, MIPI_MAP_SIZE, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
	*((unsigned *)(ptr)) = MIPI_PIPELINE_ENABLE;
	munmap(ptr, MIPI_MAP_SIZE);
	close(fd);

	int camerafd=-1;
	camerafd = cameraInit();
	if (camerafd<0) {
		printf("Cammera error!\n\n");
		return -1;
	}


	printf("Successfully setup the camera!\n");

	int test = open("/dev/1", O_RDONLY);
	if(!test){
		printf("Can't open file\n");
		return -1;
	}
	printf("IOCTL TESTS:\n");

	printf("width: %d\n", ioctl(test, CHARVIDEO_IOCQWIDTH));
	printf("height: %d\n", ioctl(test, CHARVIDEO_IOCQHEIGHT));
	printf("pixellen: %d\n", ioctl(test, CHARVIDEO_IOCQPIXELLEN));
	printf("bufsize: %d\n", ioctl(test, CHARVIDEO_IOCQBUFSIZE));

	ioctl(test, CHARVIDEO_IOCSTATUS);
	printf("Stopping vdma\n");
	ioctl(test, CHARVIDEO_IOCHALT);
	ioctl(test, CHARVIDEO_IOCSTATUS);
	sleep(1);
	printf("Starting vdma\n");
	ioctl(test, CHARVIDEO_IOCSTART);
	ioctl(test, CHARVIDEO_IOCSTATUS);

	unsigned char buf[HEIGHT*WIDTH*4];
	int result = read(test, buf, HEIGHT*WIDTH*4);
	printf("Read %d\n", result);

	char filename[100];
	sprintf(filename, "/home/root/outimg0.ppm");
	FILE *outimg = fopen(filename, "w");
	fprintf(outimg, "P3\n%d %d\n%d\n", WIDTH, HEIGHT, 255);

	printf("Opened %s\n", filename);

	for (int line=0; line<HEIGHT; line++){
		for (int col=0; col<WIDTH*4; col+=4)
		{
			uint8_t r, g, b;
			unsigned int pixel = (buf[(line*(WIDTH)*(4)) + col+3] <<24) +
								(buf[(line*(WIDTH)*(4)) + col+2] <<16) +
								(buf[(line*(WIDTH)*(4)) + col+1] <<8) +
								buf[(line*(WIDTH)*(4)) + col+0];

			pixelSplit(pixel, 0, &r, &g, &b);

			//printf("Pixel: 0x%0X\n", pixel);
			fprintf(outimg, "%d %d %d ", r, g, b);
		}
		fprintf(outimg, "\n");
	}
	fclose(outimg);


	close(test);
	return 0;

    cam_reset(camerafd);
}
