#ifndef CHARVIDEODEV_H_
#define CHARVIDEODEV_H_

static const char    g_s_Hello_World_string[] = "Hello world from kernel mode!\n\0";
static const ssize_t g_s_Hello_World_size = sizeof(g_s_Hello_World_string);

/*===============================================================================================*/
static ssize_t device_file_read(
                           struct file *file_ptr
                        , char __user *user_buffer
                        , size_t count
                        , loff_t *possition)
{
   printk( KERN_NOTICE "Simple-driver: Device file is read at offset = %i, read bytes count = %u"
            , (int)*possition
            , (unsigned int)count );

   if( *possition >= g_s_Hello_World_size )
      return 0;

   if( *possition + count > g_s_Hello_World_size )
      count = g_s_Hello_World_size - *possition;

   if( copy_to_user(user_buffer, g_s_Hello_World_string + *possition, count) != 0 )
      return -EFAULT;

   *possition += count;
   return count;
}
/*===============================================================================================*/

struct charvideodriver {
	struct file_operations fops;
	int device_file_major_number;
	static const char device_name[]="charVideoDev";
};


struct charvideodriver* init(){
	struct charvideodriver* local;

	local = (struct charvideodriver *) kmalloc(sizeof(struct charvideodriver), GFP_KERNEL);
	if (local == NULL) {
		dev_err(dev, "Could not allocate charvideodriver device\n");
		return NULL;
	}
	local->device_file_major_number=0;
	struct file_operations fops;
	fops.owner=THIS_MODULE;
	fops.read= device_file_read;
	local->fops = fops;

	return local;
}

int regcharvideodriver(struct dev*){
	return register_chrdev( 0, charvide, &simple_driver_fops );
}

#endif
