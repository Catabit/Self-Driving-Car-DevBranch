// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GaussianBlur (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        fifo1_dout,
        fifo1_empty_n,
        fifo1_read,
        fifo2_din,
        fifo2_full_n,
        fifo2_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] fifo1_dout;
input   fifo1_empty_n;
output   fifo1_read;
output  [7:0] fifo2_din;
input   fifo2_full_n;
output   fifo2_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg fifo1_read;
reg fifo2_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    fifo1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_65_i_reg_1290;
reg    fifo2_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] ap_reg_pp0_iter3_tmp_65_i_reg_1290;
reg   [10:0] xi_i_reg_240;
wire   [0:0] tmp_i_fu_251_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] yi_fu_257_p2;
reg   [9:0] yi_reg_1285;
wire   [0:0] tmp_65_i_fu_263_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_tmp_65_i_reg_1290;
reg   [0:0] ap_reg_pp0_iter2_tmp_65_i_reg_1290;
wire   [10:0] xi_fu_269_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [10:0] line_buf_addr_reg_1299;
reg   [7:0] window_buf_0_3_1_reg_1305;
reg   [7:0] window_buf_1_1_6_reg_1310;
reg   [7:0] window_buf_1_2_1_reg_1316;
reg   [7:0] window_buf_2_1_6_reg_1322;
reg   [7:0] window_buf_2_2_1_reg_1329;
reg   [7:0] window_buf_2_3_1_reg_1335;
reg   [7:0] window_buf_3_2_1_reg_1341;
reg   [7:0] window_buf_0_4_reg_1347;
wire   [12:0] pix_gauss_2_0_2_i_fu_453_p2;
reg   [12:0] pix_gauss_2_0_2_i_reg_1352;
wire   [12:0] tmp9_fu_631_p2;
reg   [12:0] tmp9_reg_1357;
wire   [12:0] tmp12_fu_637_p2;
reg   [12:0] tmp12_reg_1362;
wire   [12:0] tmp13_fu_653_p2;
reg   [12:0] tmp13_reg_1367;
wire   [10:0] tmp16_fu_659_p2;
reg   [10:0] tmp16_reg_1372;
wire   [10:0] tmp17_fu_675_p2;
reg   [10:0] tmp17_reg_1377;
wire   [14:0] pix_gauss_2_1_1_i_fu_843_p2;
reg   [14:0] pix_gauss_2_1_1_i_reg_1382;
wire   [13:0] tmp_105_1_2_i_fu_871_p2;
reg   [13:0] tmp_105_1_2_i_reg_1387;
wire   [14:0] tmp5_fu_1039_p2;
reg   [14:0] tmp5_reg_1392;
wire   [15:0] tmp6_fu_1064_p2;
reg   [15:0] tmp6_reg_1397;
wire   [14:0] tmp10_fu_1102_p2;
reg   [14:0] tmp10_reg_1402;
reg   [7:0] tmp_70_i_reg_1407;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state4;
reg    ap_enable_reg_pp0_iter3;
wire   [10:0] line_buf_address0;
reg    line_buf_ce0;
wire   [39:0] line_buf_q0;
reg    line_buf_ce1;
reg    line_buf_we1;
wire   [39:0] line_buf_d1;
reg   [9:0] yi_i_reg_229;
reg    ap_block_state1;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_66_i_fu_275_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] window_buf_0_1_fu_118;
reg   [7:0] window_buf_0_1_5_fu_122;
reg   [7:0] window_buf_0_2_fu_126;
reg   [7:0] window_buf_0_3_fu_130;
reg   [7:0] window_buf_1_1_fu_134;
reg   [7:0] window_buf_1_1_5_fu_138;
reg   [7:0] window_buf_1_2_fu_142;
reg   [7:0] window_buf_1_3_fu_146;
wire   [7:0] window_buf_1_4_fu_344_p4;
reg   [7:0] window_buf_2_1_fu_150;
reg   [7:0] window_buf_2_1_5_fu_154;
reg   [7:0] window_buf_2_2_fu_158;
reg   [7:0] window_buf_2_3_fu_162;
wire   [7:0] window_buf_2_4_fu_354_p4;
reg   [7:0] window_buf_3_1_fu_166;
reg   [7:0] window_buf_3_1_1_fu_170;
reg   [7:0] window_buf_3_2_fu_174;
reg   [7:0] window_buf_3_3_fu_178;
wire   [7:0] window_buf_3_4_fu_364_p4;
reg   [7:0] window_buf_4_1_fu_182;
reg   [7:0] window_buf_4_1_1_fu_186;
reg   [7:0] window_buf_4_2_fu_190;
reg   [7:0] window_buf_4_3_fu_194;
wire   [31:0] tmp_31_i_fu_374_p4;
wire   [9:0] tmp_105_0_1_i_fu_397_p3;
wire   [10:0] tmp_104_0_cast_i_fu_393_p1;
wire   [10:0] tmp_105_0_1_cast_i_fu_405_p1;
wire   [10:0] pix_gauss_2_0_1_i_fu_409_p2;
wire   [10:0] p_shl6_i_fu_419_p3;
wire   [8:0] p_shl7_i_fu_431_p3;
wire   [11:0] p_shl6_cast_i_fu_427_p1;
wire   [11:0] p_shl7_cast_i_fu_439_p1;
wire   [11:0] tmp_105_0_2_i_fu_443_p2;
wire   [12:0] pix_gauss_2_0_1_cast_fu_415_p1;
wire  signed [12:0] tmp_105_0_2_cast_i_fu_449_p1;
wire   [11:0] tmp_105_1_3_i_fu_459_p3;
wire   [9:0] tmp_105_1_4_i_fu_471_p3;
wire   [10:0] p_shl15_i_fu_483_p3;
wire   [8:0] p_shl16_i_fu_495_p3;
wire   [11:0] p_shl15_cast_i_fu_491_p1;
wire   [11:0] p_shl16_cast_i_fu_503_p1;
wire   [11:0] tmp_105_2_4_i_fu_507_p2;
wire   [9:0] tmp_105_3_i_fu_517_p3;
wire   [11:0] tmp_105_3_1_i_fu_529_p3;
wire   [11:0] tmp_105_3_3_i_fu_541_p3;
wire   [9:0] tmp_105_3_4_i_fu_553_p3;
wire   [9:0] tmp_105_4_1_i_fu_569_p3;
wire   [10:0] p_shl11_i_fu_581_p3;
wire   [8:0] p_shl12_i_fu_593_p3;
wire   [11:0] p_shl11_cast_i_fu_589_p1;
wire   [11:0] p_shl12_cast_i_fu_601_p1;
wire   [11:0] tmp_105_4_2_i_fu_605_p2;
wire   [9:0] tmp_105_4_3_i_fu_615_p3;
wire  signed [12:0] tmp_105_4_2_cast_i_c_fu_611_p1;
wire  signed [12:0] tmp_105_2_4_cast_i_c_fu_513_p1;
wire   [12:0] tmp_105_3_1_cast_i_c_fu_537_p1;
wire   [12:0] tmp_105_1_3_cast_i_c_fu_467_p1;
wire   [10:0] tmp_105_3_cast_i_cas_fu_525_p1;
wire   [10:0] tmp_105_1_4_cast_i_c_fu_479_p1;
wire   [10:0] tmp14_fu_643_p2;
wire   [12:0] tmp_105_3_3_cast_i_c_fu_549_p1;
wire   [12:0] tmp14_cast_fu_649_p1;
wire   [10:0] tmp_105_4_1_cast_i_c_fu_577_p1;
wire   [10:0] tmp_105_3_4_cast_i_c_fu_561_p1;
wire   [8:0] tmp_104_4_4_cast_i_c_fu_627_p1;
wire   [8:0] tmp_104_4_cast_i_cas_fu_565_p1;
wire   [8:0] tmp18_fu_665_p2;
wire   [10:0] tmp_105_4_3_cast_i_c_fu_623_p1;
wire   [10:0] tmp18_cast_fu_671_p1;
wire   [9:0] tmp_105_0_3_i_fu_780_p3;
wire   [9:0] tmp_105_1_i_fu_794_p3;
wire   [13:0] tmp_105_0_3_cast_i_fu_787_p1;
wire  signed [13:0] pix_gauss_2_0_2_cast_fu_777_p1;
wire   [10:0] tmp_104_0_4_cast_i_c_fu_791_p1;
wire   [10:0] tmp_105_1_cast_i_cas_fu_802_p1;
wire   [10:0] tmp1_fu_812_p2;
wire   [13:0] tmp_fu_806_p2;
wire   [13:0] tmp1_cast_fu_818_p1;
wire   [13:0] pix_gauss_2_1_i_fu_822_p2;
wire   [11:0] tmp_105_1_1_i_fu_832_p3;
wire   [14:0] tmp_105_1_1_cast_i_fu_839_p1;
wire  signed [14:0] pix_gauss_2_1_cast_i_fu_828_p1;
wire   [12:0] p_shl8_i_fu_849_p3;
wire   [10:0] p_shl9_i_fu_860_p3;
wire   [13:0] p_shl8_cast_i_fu_856_p1;
wire   [13:0] p_shl9_cast_i_fu_867_p1;
wire   [10:0] p_shl10_i_fu_877_p3;
wire   [8:0] p_shl23_i_fu_889_p3;
wire   [11:0] p_shl10_cast_i_fu_885_p1;
wire   [11:0] p_shl23_cast_i_fu_897_p1;
wire   [11:0] tmp_105_2_i_fu_901_p2;
wire   [12:0] p_shl21_i_fu_911_p3;
wire   [10:0] p_shl22_i_fu_922_p3;
wire   [13:0] p_shl21_cast_i_fu_918_p1;
wire   [13:0] p_shl22_cast_i_fu_929_p1;
wire   [13:0] tmp_105_2_1_i_fu_933_p2;
wire   [12:0] p_shl19_i_fu_943_p3;
wire   [9:0] p_shl20_i_fu_954_p3;
wire   [13:0] p_shl20_cast_i_fu_961_p1;
wire   [13:0] p_shl19_cast_i_fu_950_p1;
wire   [13:0] tmp_105_2_2_i_fu_965_p2;
wire   [12:0] p_shl17_i_fu_975_p3;
wire   [10:0] p_shl18_i_fu_986_p3;
wire   [13:0] p_shl17_cast_i_fu_982_p1;
wire   [13:0] p_shl18_cast_i_fu_993_p1;
wire   [13:0] tmp_105_2_3_i_fu_997_p2;
wire   [12:0] p_shl13_i_fu_1007_p3;
wire   [10:0] p_shl14_i_fu_1018_p3;
wire   [13:0] p_shl13_cast_i_fu_1014_p1;
wire   [13:0] p_shl14_cast_i_fu_1025_p1;
wire   [13:0] tmp_105_3_2_i_fu_1029_p2;
wire  signed [14:0] tmp_105_2_3_cast_i_c_fu_1003_p1;
wire  signed [14:0] tmp_105_2_1_cast_i_c_fu_939_p1;
wire   [15:0] tmp_105_2_2_cast_i_fu_971_p1;
wire  signed [15:0] tmp_105_3_2_cast_i_fu_1035_p1;
wire  signed [13:0] tmp_105_2_cast_i_cas_fu_907_p1;
wire  signed [13:0] tmp9_cast_fu_1051_p1;
wire   [13:0] tmp8_fu_1054_p2;
wire   [15:0] tmp7_fu_1045_p2;
wire  signed [15:0] tmp8_cast_fu_1060_p1;
wire   [13:0] tmp12_cast_fu_1070_p1;
wire   [13:0] tmp13_cast_fu_1073_p1;
wire   [13:0] tmp11_fu_1076_p2;
wire   [11:0] tmp16_cast_fu_1086_p1;
wire   [11:0] tmp17_cast_fu_1089_p1;
wire   [11:0] tmp15_fu_1092_p2;
wire   [14:0] tmp11_cast_fu_1082_p1;
wire   [14:0] tmp15_cast_fu_1098_p1;
wire  signed [15:0] tmp_105_1_2_cast_i_fu_1119_p1;
wire  signed [15:0] pix_gauss_2_1_1_cast_fu_1116_p1;
wire   [15:0] tmp4_fu_1122_p2;
wire  signed [15:0] tmp5_cast_fu_1128_p1;
wire   [15:0] tmp3_fu_1131_p2;
wire   [15:0] tmp2_fu_1137_p2;
wire   [15:0] tmp10_cast_fu_1142_p1;
wire   [15:0] pix_gauss_2_4_4_i_fu_1145_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

GaussianBlur_lineeOg #(
    .DataWidth( 40 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
line_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buf_address0),
    .ce0(line_buf_ce0),
    .q0(line_buf_q0),
    .address1(line_buf_addr_reg_1299),
    .ce1(line_buf_ce1),
    .we1(line_buf_we1),
    .d1(line_buf_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_i_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((tmp_65_i_fu_263_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_i_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state4)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((tmp_i_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        xi_i_reg_240 <= 11'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_65_i_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        xi_i_reg_240 <= xi_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        yi_i_reg_229 <= yi_reg_1285;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        yi_i_reg_229 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_tmp_65_i_reg_1290 <= tmp_65_i_reg_1290;
        tmp_65_i_reg_1290 <= tmp_65_i_fu_263_p2;
        window_buf_0_3_1_reg_1305 <= window_buf_0_3_fu_130;
        window_buf_1_1_6_reg_1310 <= window_buf_1_1_5_fu_138;
        window_buf_1_2_1_reg_1316 <= window_buf_1_2_fu_142;
        window_buf_2_1_6_reg_1322 <= window_buf_2_1_5_fu_154;
        window_buf_2_2_1_reg_1329 <= window_buf_2_2_fu_158;
        window_buf_2_3_1_reg_1335 <= window_buf_2_3_fu_162;
        window_buf_3_2_1_reg_1341 <= window_buf_3_2_fu_174;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_tmp_65_i_reg_1290 <= ap_reg_pp0_iter1_tmp_65_i_reg_1290;
        ap_reg_pp0_iter3_tmp_65_i_reg_1290 <= ap_reg_pp0_iter2_tmp_65_i_reg_1290;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_65_i_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buf_addr_reg_1299 <= tmp_66_i_fu_275_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_65_i_reg_1290 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_gauss_2_0_2_i_reg_1352 <= pix_gauss_2_0_2_i_fu_453_p2;
        tmp12_reg_1362[12 : 4] <= tmp12_fu_637_p2[12 : 4];
        tmp13_reg_1367[12 : 2] <= tmp13_fu_653_p2[12 : 2];
        tmp16_reg_1372[10 : 2] <= tmp16_fu_659_p2[10 : 2];
        tmp17_reg_1377 <= tmp17_fu_675_p2;
        tmp9_reg_1357[12 : 1] <= tmp9_fu_631_p2[12 : 1];
        window_buf_0_4_reg_1347 <= {{line_buf_q0[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_tmp_65_i_reg_1290 == 1'd0))) begin
        pix_gauss_2_1_1_i_reg_1382 <= pix_gauss_2_1_1_i_fu_843_p2;
        tmp10_reg_1402 <= tmp10_fu_1102_p2;
        tmp5_reg_1392[14 : 3] <= tmp5_fu_1039_p2[14 : 3];
        tmp6_reg_1397[15 : 1] <= tmp6_fu_1064_p2[15 : 1];
        tmp_105_1_2_i_reg_1387[13 : 3] <= tmp_105_1_2_i_fu_871_p2[13 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter2_tmp_65_i_reg_1290 == 1'd0))) begin
        tmp_70_i_reg_1407 <= {{pix_gauss_2_4_4_i_fu_1145_p2[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_65_i_reg_1290 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        window_buf_0_1_5_fu_122 <= window_buf_0_2_fu_126;
        window_buf_0_1_fu_118 <= window_buf_0_1_5_fu_122;
        window_buf_0_2_fu_126 <= window_buf_0_3_fu_130;
        window_buf_0_3_fu_130 <= {{line_buf_q0[15:8]}};
        window_buf_1_1_5_fu_138 <= window_buf_1_2_fu_142;
        window_buf_1_2_fu_142 <= window_buf_1_3_fu_146;
        window_buf_1_3_fu_146 <= {{line_buf_q0[23:16]}};
        window_buf_2_1_5_fu_154 <= window_buf_2_2_fu_158;
        window_buf_2_2_fu_158 <= window_buf_2_3_fu_162;
        window_buf_2_3_fu_162 <= {{line_buf_q0[31:24]}};
        window_buf_3_1_1_fu_170 <= window_buf_3_2_fu_174;
        window_buf_3_1_fu_166 <= window_buf_3_1_1_fu_170;
        window_buf_3_2_fu_174 <= window_buf_3_3_fu_178;
        window_buf_3_3_fu_178 <= {{line_buf_q0[39:32]}};
        window_buf_4_1_1_fu_186 <= window_buf_4_2_fu_190;
        window_buf_4_1_fu_182 <= window_buf_4_1_1_fu_186;
        window_buf_4_2_fu_190 <= window_buf_4_3_fu_194;
        window_buf_4_3_fu_194 <= fifo1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_tmp_65_i_reg_1290 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        window_buf_1_1_fu_134 <= window_buf_1_1_6_reg_1310;
        window_buf_2_1_fu_150 <= window_buf_2_1_6_reg_1322;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        yi_reg_1285 <= yi_fu_257_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_65_i_reg_1290 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo1_blk_n = fifo1_empty_n;
    end else begin
        fifo1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_65_i_reg_1290 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo1_read = 1'b1;
    end else begin
        fifo1_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter3_tmp_65_i_reg_1290 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        fifo2_blk_n = fifo2_full_n;
    end else begin
        fifo2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter3_tmp_65_i_reg_1290 == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        fifo2_write = 1'b1;
    end else begin
        fifo2_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        line_buf_ce0 = 1'b1;
    end else begin
        line_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buf_ce1 = 1'b1;
    end else begin
        line_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_65_i_reg_1290 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buf_we1 = 1'b1;
    end else begin
        line_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_i_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_reg_pp0_iter3_tmp_65_i_reg_1290 == 1'd0) & (fifo2_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((tmp_65_i_reg_1290 == 1'd0) & (fifo1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_reg_pp0_iter3_tmp_65_i_reg_1290 == 1'd0) & (fifo2_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((tmp_65_i_reg_1290 == 1'd0) & (fifo1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_reg_pp0_iter3_tmp_65_i_reg_1290 == 1'd0) & (fifo2_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((tmp_65_i_reg_1290 == 1'd0) & (fifo1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((tmp_65_i_reg_1290 == 1'd0) & (fifo1_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter4 = ((ap_reg_pp0_iter3_tmp_65_i_reg_1290 == 1'd0) & (fifo2_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign fifo2_din = tmp_70_i_reg_1407;

assign line_buf_address0 = tmp_66_i_fu_275_p1;

assign line_buf_d1 = {{fifo1_dout}, {tmp_31_i_fu_374_p4}};

assign p_shl10_cast_i_fu_885_p1 = p_shl10_i_fu_877_p3;

assign p_shl10_i_fu_877_p3 = {{window_buf_2_1_fu_150}, {3'd0}};

assign p_shl11_cast_i_fu_589_p1 = p_shl11_i_fu_581_p3;

assign p_shl11_i_fu_581_p3 = {{window_buf_4_2_fu_190}, {3'd0}};

assign p_shl12_cast_i_fu_601_p1 = p_shl12_i_fu_593_p3;

assign p_shl12_i_fu_593_p3 = {{window_buf_4_2_fu_190}, {1'd0}};

assign p_shl13_cast_i_fu_1014_p1 = p_shl13_i_fu_1007_p3;

assign p_shl13_i_fu_1007_p3 = {{window_buf_3_2_1_reg_1341}, {5'd0}};

assign p_shl14_cast_i_fu_1025_p1 = p_shl14_i_fu_1018_p3;

assign p_shl14_i_fu_1018_p3 = {{window_buf_3_2_1_reg_1341}, {3'd0}};

assign p_shl15_cast_i_fu_491_p1 = p_shl15_i_fu_483_p3;

assign p_shl15_i_fu_483_p3 = {{window_buf_2_4_fu_354_p4}, {3'd0}};

assign p_shl16_cast_i_fu_503_p1 = p_shl16_i_fu_495_p3;

assign p_shl16_i_fu_495_p3 = {{window_buf_2_4_fu_354_p4}, {1'd0}};

assign p_shl17_cast_i_fu_982_p1 = p_shl17_i_fu_975_p3;

assign p_shl17_i_fu_975_p3 = {{window_buf_2_3_1_reg_1335}, {5'd0}};

assign p_shl18_cast_i_fu_993_p1 = p_shl18_i_fu_986_p3;

assign p_shl18_i_fu_986_p3 = {{window_buf_2_3_1_reg_1335}, {3'd0}};

assign p_shl19_cast_i_fu_950_p1 = p_shl19_i_fu_943_p3;

assign p_shl19_i_fu_943_p3 = {{window_buf_2_2_1_reg_1329}, {5'd0}};

assign p_shl20_cast_i_fu_961_p1 = p_shl20_i_fu_954_p3;

assign p_shl20_i_fu_954_p3 = {{window_buf_2_2_1_reg_1329}, {2'd0}};

assign p_shl21_cast_i_fu_918_p1 = p_shl21_i_fu_911_p3;

assign p_shl21_i_fu_911_p3 = {{window_buf_2_1_6_reg_1322}, {5'd0}};

assign p_shl22_cast_i_fu_929_p1 = p_shl22_i_fu_922_p3;

assign p_shl22_i_fu_922_p3 = {{window_buf_2_1_6_reg_1322}, {3'd0}};

assign p_shl23_cast_i_fu_897_p1 = p_shl23_i_fu_889_p3;

assign p_shl23_i_fu_889_p3 = {{window_buf_2_1_fu_150}, {1'd0}};

assign p_shl6_cast_i_fu_427_p1 = p_shl6_i_fu_419_p3;

assign p_shl6_i_fu_419_p3 = {{window_buf_0_2_fu_126}, {3'd0}};

assign p_shl7_cast_i_fu_439_p1 = p_shl7_i_fu_431_p3;

assign p_shl7_i_fu_431_p3 = {{window_buf_0_2_fu_126}, {1'd0}};

assign p_shl8_cast_i_fu_856_p1 = p_shl8_i_fu_849_p3;

assign p_shl8_i_fu_849_p3 = {{window_buf_1_2_1_reg_1316}, {5'd0}};

assign p_shl9_cast_i_fu_867_p1 = p_shl9_i_fu_860_p3;

assign p_shl9_i_fu_860_p3 = {{window_buf_1_2_1_reg_1316}, {3'd0}};

assign pix_gauss_2_0_1_cast_fu_415_p1 = pix_gauss_2_0_1_i_fu_409_p2;

assign pix_gauss_2_0_1_i_fu_409_p2 = (tmp_104_0_cast_i_fu_393_p1 + tmp_105_0_1_cast_i_fu_405_p1);

assign pix_gauss_2_0_2_cast_fu_777_p1 = $signed(pix_gauss_2_0_2_i_reg_1352);

assign pix_gauss_2_0_2_i_fu_453_p2 = ($signed(pix_gauss_2_0_1_cast_fu_415_p1) + $signed(tmp_105_0_2_cast_i_fu_449_p1));

assign pix_gauss_2_1_1_cast_fu_1116_p1 = $signed(pix_gauss_2_1_1_i_reg_1382);

assign pix_gauss_2_1_1_i_fu_843_p2 = ($signed(tmp_105_1_1_cast_i_fu_839_p1) + $signed(pix_gauss_2_1_cast_i_fu_828_p1));

assign pix_gauss_2_1_cast_i_fu_828_p1 = $signed(pix_gauss_2_1_i_fu_822_p2);

assign pix_gauss_2_1_i_fu_822_p2 = (tmp_fu_806_p2 + tmp1_cast_fu_818_p1);

assign pix_gauss_2_4_4_i_fu_1145_p2 = (tmp2_fu_1137_p2 + tmp10_cast_fu_1142_p1);

assign start_out = real_start;

assign tmp10_cast_fu_1142_p1 = tmp10_reg_1402;

assign tmp10_fu_1102_p2 = (tmp11_cast_fu_1082_p1 + tmp15_cast_fu_1098_p1);

assign tmp11_cast_fu_1082_p1 = tmp11_fu_1076_p2;

assign tmp11_fu_1076_p2 = (tmp12_cast_fu_1070_p1 + tmp13_cast_fu_1073_p1);

assign tmp12_cast_fu_1070_p1 = tmp12_reg_1362;

assign tmp12_fu_637_p2 = (tmp_105_3_1_cast_i_c_fu_537_p1 + tmp_105_1_3_cast_i_c_fu_467_p1);

assign tmp13_cast_fu_1073_p1 = tmp13_reg_1367;

assign tmp13_fu_653_p2 = (tmp_105_3_3_cast_i_c_fu_549_p1 + tmp14_cast_fu_649_p1);

assign tmp14_cast_fu_649_p1 = tmp14_fu_643_p2;

assign tmp14_fu_643_p2 = (tmp_105_3_cast_i_cas_fu_525_p1 + tmp_105_1_4_cast_i_c_fu_479_p1);

assign tmp15_cast_fu_1098_p1 = tmp15_fu_1092_p2;

assign tmp15_fu_1092_p2 = (tmp16_cast_fu_1086_p1 + tmp17_cast_fu_1089_p1);

assign tmp16_cast_fu_1086_p1 = tmp16_reg_1372;

assign tmp16_fu_659_p2 = (tmp_105_4_1_cast_i_c_fu_577_p1 + tmp_105_3_4_cast_i_c_fu_561_p1);

assign tmp17_cast_fu_1089_p1 = tmp17_reg_1377;

assign tmp17_fu_675_p2 = (tmp_105_4_3_cast_i_c_fu_623_p1 + tmp18_cast_fu_671_p1);

assign tmp18_cast_fu_671_p1 = tmp18_fu_665_p2;

assign tmp18_fu_665_p2 = (tmp_104_4_4_cast_i_c_fu_627_p1 + tmp_104_4_cast_i_cas_fu_565_p1);

assign tmp1_cast_fu_818_p1 = tmp1_fu_812_p2;

assign tmp1_fu_812_p2 = (tmp_104_0_4_cast_i_c_fu_791_p1 + tmp_105_1_cast_i_cas_fu_802_p1);

assign tmp2_fu_1137_p2 = (tmp3_fu_1131_p2 + tmp6_reg_1397);

assign tmp3_fu_1131_p2 = ($signed(tmp4_fu_1122_p2) + $signed(tmp5_cast_fu_1128_p1));

assign tmp4_fu_1122_p2 = ($signed(tmp_105_1_2_cast_i_fu_1119_p1) + $signed(pix_gauss_2_1_1_cast_fu_1116_p1));

assign tmp5_cast_fu_1128_p1 = $signed(tmp5_reg_1392);

assign tmp5_fu_1039_p2 = ($signed(tmp_105_2_3_cast_i_c_fu_1003_p1) + $signed(tmp_105_2_1_cast_i_c_fu_939_p1));

assign tmp6_fu_1064_p2 = ($signed(tmp7_fu_1045_p2) + $signed(tmp8_cast_fu_1060_p1));

assign tmp7_fu_1045_p2 = ($signed(tmp_105_2_2_cast_i_fu_971_p1) + $signed(tmp_105_3_2_cast_i_fu_1035_p1));

assign tmp8_cast_fu_1060_p1 = $signed(tmp8_fu_1054_p2);

assign tmp8_fu_1054_p2 = ($signed(tmp_105_2_cast_i_cas_fu_907_p1) + $signed(tmp9_cast_fu_1051_p1));

assign tmp9_cast_fu_1051_p1 = $signed(tmp9_reg_1357);

assign tmp9_fu_631_p2 = ($signed(tmp_105_4_2_cast_i_c_fu_611_p1) + $signed(tmp_105_2_4_cast_i_c_fu_513_p1));

assign tmp_104_0_4_cast_i_c_fu_791_p1 = window_buf_0_4_reg_1347;

assign tmp_104_0_cast_i_fu_393_p1 = window_buf_0_1_fu_118;

assign tmp_104_4_4_cast_i_c_fu_627_p1 = fifo1_dout;

assign tmp_104_4_cast_i_cas_fu_565_p1 = window_buf_4_1_fu_182;

assign tmp_105_0_1_cast_i_fu_405_p1 = tmp_105_0_1_i_fu_397_p3;

assign tmp_105_0_1_i_fu_397_p3 = {{window_buf_0_1_5_fu_122}, {2'd0}};

assign tmp_105_0_2_cast_i_fu_449_p1 = $signed(tmp_105_0_2_i_fu_443_p2);

assign tmp_105_0_2_i_fu_443_p2 = (p_shl6_cast_i_fu_427_p1 - p_shl7_cast_i_fu_439_p1);

assign tmp_105_0_3_cast_i_fu_787_p1 = tmp_105_0_3_i_fu_780_p3;

assign tmp_105_0_3_i_fu_780_p3 = {{window_buf_0_3_1_reg_1305}, {2'd0}};

assign tmp_105_1_1_cast_i_fu_839_p1 = tmp_105_1_1_i_fu_832_p3;

assign tmp_105_1_1_i_fu_832_p3 = {{window_buf_1_1_6_reg_1310}, {4'd0}};

assign tmp_105_1_2_cast_i_fu_1119_p1 = $signed(tmp_105_1_2_i_reg_1387);

assign tmp_105_1_2_i_fu_871_p2 = (p_shl8_cast_i_fu_856_p1 - p_shl9_cast_i_fu_867_p1);

assign tmp_105_1_3_cast_i_c_fu_467_p1 = tmp_105_1_3_i_fu_459_p3;

assign tmp_105_1_3_i_fu_459_p3 = {{window_buf_1_3_fu_146}, {4'd0}};

assign tmp_105_1_4_cast_i_c_fu_479_p1 = tmp_105_1_4_i_fu_471_p3;

assign tmp_105_1_4_i_fu_471_p3 = {{window_buf_1_4_fu_344_p4}, {2'd0}};

assign tmp_105_1_cast_i_cas_fu_802_p1 = tmp_105_1_i_fu_794_p3;

assign tmp_105_1_i_fu_794_p3 = {{window_buf_1_1_fu_134}, {2'd0}};

assign tmp_105_2_1_cast_i_c_fu_939_p1 = $signed(tmp_105_2_1_i_fu_933_p2);

assign tmp_105_2_1_i_fu_933_p2 = (p_shl21_cast_i_fu_918_p1 - p_shl22_cast_i_fu_929_p1);

assign tmp_105_2_2_cast_i_fu_971_p1 = tmp_105_2_2_i_fu_965_p2;

assign tmp_105_2_2_i_fu_965_p2 = (p_shl20_cast_i_fu_961_p1 + p_shl19_cast_i_fu_950_p1);

assign tmp_105_2_3_cast_i_c_fu_1003_p1 = $signed(tmp_105_2_3_i_fu_997_p2);

assign tmp_105_2_3_i_fu_997_p2 = (p_shl17_cast_i_fu_982_p1 - p_shl18_cast_i_fu_993_p1);

assign tmp_105_2_4_cast_i_c_fu_513_p1 = $signed(tmp_105_2_4_i_fu_507_p2);

assign tmp_105_2_4_i_fu_507_p2 = (p_shl15_cast_i_fu_491_p1 - p_shl16_cast_i_fu_503_p1);

assign tmp_105_2_cast_i_cas_fu_907_p1 = $signed(tmp_105_2_i_fu_901_p2);

assign tmp_105_2_i_fu_901_p2 = (p_shl10_cast_i_fu_885_p1 - p_shl23_cast_i_fu_897_p1);

assign tmp_105_3_1_cast_i_c_fu_537_p1 = tmp_105_3_1_i_fu_529_p3;

assign tmp_105_3_1_i_fu_529_p3 = {{window_buf_3_1_1_fu_170}, {4'd0}};

assign tmp_105_3_2_cast_i_fu_1035_p1 = $signed(tmp_105_3_2_i_fu_1029_p2);

assign tmp_105_3_2_i_fu_1029_p2 = (p_shl13_cast_i_fu_1014_p1 - p_shl14_cast_i_fu_1025_p1);

assign tmp_105_3_3_cast_i_c_fu_549_p1 = tmp_105_3_3_i_fu_541_p3;

assign tmp_105_3_3_i_fu_541_p3 = {{window_buf_3_3_fu_178}, {4'd0}};

assign tmp_105_3_4_cast_i_c_fu_561_p1 = tmp_105_3_4_i_fu_553_p3;

assign tmp_105_3_4_i_fu_553_p3 = {{window_buf_3_4_fu_364_p4}, {2'd0}};

assign tmp_105_3_cast_i_cas_fu_525_p1 = tmp_105_3_i_fu_517_p3;

assign tmp_105_3_i_fu_517_p3 = {{window_buf_3_1_fu_166}, {2'd0}};

assign tmp_105_4_1_cast_i_c_fu_577_p1 = tmp_105_4_1_i_fu_569_p3;

assign tmp_105_4_1_i_fu_569_p3 = {{window_buf_4_1_1_fu_186}, {2'd0}};

assign tmp_105_4_2_cast_i_c_fu_611_p1 = $signed(tmp_105_4_2_i_fu_605_p2);

assign tmp_105_4_2_i_fu_605_p2 = (p_shl11_cast_i_fu_589_p1 - p_shl12_cast_i_fu_601_p1);

assign tmp_105_4_3_cast_i_c_fu_623_p1 = tmp_105_4_3_i_fu_615_p3;

assign tmp_105_4_3_i_fu_615_p3 = {{window_buf_4_3_fu_194}, {2'd0}};

assign tmp_31_i_fu_374_p4 = {{line_buf_q0[39:8]}};

assign tmp_65_i_fu_263_p2 = ((xi_i_reg_240 == 11'd1280) ? 1'b1 : 1'b0);

assign tmp_66_i_fu_275_p1 = xi_i_reg_240;

assign tmp_fu_806_p2 = ($signed(tmp_105_0_3_cast_i_fu_787_p1) + $signed(pix_gauss_2_0_2_cast_fu_777_p1));

assign tmp_i_fu_251_p2 = ((yi_i_reg_229 == 10'd720) ? 1'b1 : 1'b0);

assign window_buf_1_4_fu_344_p4 = {{line_buf_q0[23:16]}};

assign window_buf_2_4_fu_354_p4 = {{line_buf_q0[31:24]}};

assign window_buf_3_4_fu_364_p4 = {{line_buf_q0[39:32]}};

assign xi_fu_269_p2 = (xi_i_reg_240 + 11'd1);

assign yi_fu_257_p2 = (yi_i_reg_229 + 10'd1);

always @ (posedge ap_clk) begin
    tmp9_reg_1357[0] <= 1'b0;
    tmp12_reg_1362[3:0] <= 4'b0000;
    tmp13_reg_1367[1:0] <= 2'b00;
    tmp16_reg_1372[1:0] <= 2'b00;
    tmp_105_1_2_i_reg_1387[2:0] <= 3'b000;
    tmp5_reg_1392[2:0] <= 3'b000;
    tmp6_reg_1397[0] <= 1'b0;
end

endmodule //GaussianBlur
