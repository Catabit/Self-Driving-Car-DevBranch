// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AXIS2GrayArray (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        axis_in_TDATA,
        axis_in_TVALID,
        axis_in_TREADY,
        axis_in_TKEEP,
        axis_in_TSTRB,
        axis_in_TUSER,
        axis_in_TLAST,
        axis_in_TID,
        axis_in_TDEST,
        fifo1_din,
        fifo1_full_n,
        fifo1_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_state9 = 8'd32;
parameter    ap_ST_fsm_pp2_stage0 = 8'd64;
parameter    ap_ST_fsm_state12 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] axis_in_TDATA;
input   axis_in_TVALID;
output   axis_in_TREADY;
input  [2:0] axis_in_TKEEP;
input  [2:0] axis_in_TSTRB;
input  [0:0] axis_in_TUSER;
input  [0:0] axis_in_TLAST;
input  [0:0] axis_in_TID;
input  [0:0] axis_in_TDEST;
output  [7:0] fifo1_din;
input   fifo1_full_n;
output   fifo1_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg fifo1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [23:0] axis_src_V_data_V_0_data_out;
wire    axis_src_V_data_V_0_vld_in;
wire    axis_src_V_data_V_0_vld_out;
wire    axis_src_V_data_V_0_ack_in;
reg    axis_src_V_data_V_0_ack_out;
reg   [23:0] axis_src_V_data_V_0_payload_A;
reg   [23:0] axis_src_V_data_V_0_payload_B;
reg    axis_src_V_data_V_0_sel_rd;
reg    axis_src_V_data_V_0_sel_wr;
wire    axis_src_V_data_V_0_sel;
wire    axis_src_V_data_V_0_load_A;
wire    axis_src_V_data_V_0_load_B;
reg   [1:0] axis_src_V_data_V_0_state;
wire    axis_src_V_data_V_0_state_cmp_full;
reg   [0:0] axis_src_V_user_V_0_data_out;
wire    axis_src_V_user_V_0_vld_in;
wire    axis_src_V_user_V_0_vld_out;
wire    axis_src_V_user_V_0_ack_in;
reg    axis_src_V_user_V_0_ack_out;
reg   [0:0] axis_src_V_user_V_0_payload_A;
reg   [0:0] axis_src_V_user_V_0_payload_B;
reg    axis_src_V_user_V_0_sel_rd;
reg    axis_src_V_user_V_0_sel_wr;
wire    axis_src_V_user_V_0_sel;
wire    axis_src_V_user_V_0_load_A;
wire    axis_src_V_user_V_0_load_B;
reg   [1:0] axis_src_V_user_V_0_state;
wire    axis_src_V_user_V_0_state_cmp_full;
reg   [0:0] axis_src_V_last_V_0_data_out;
wire    axis_src_V_last_V_0_vld_in;
wire    axis_src_V_last_V_0_vld_out;
wire    axis_src_V_last_V_0_ack_in;
reg    axis_src_V_last_V_0_ack_out;
reg   [0:0] axis_src_V_last_V_0_payload_A;
reg   [0:0] axis_src_V_last_V_0_payload_B;
reg    axis_src_V_last_V_0_sel_rd;
reg    axis_src_V_last_V_0_sel_wr;
wire    axis_src_V_last_V_0_sel;
wire    axis_src_V_last_V_0_load_A;
wire    axis_src_V_last_V_0_load_B;
reg   [1:0] axis_src_V_last_V_0_state;
wire    axis_src_V_last_V_0_state_cmp_full;
wire    axis_src_V_dest_V_0_vld_in;
reg    axis_src_V_dest_V_0_ack_out;
reg   [1:0] axis_src_V_dest_V_0_state;
reg    axis_in_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] tmp_s_reg_442;
reg   [0:0] brmerge_reg_451;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] eol_2_reg_236;
reg    fifo1_blk_n;
reg    ap_enable_reg_pp1_iter3;
reg   [0:0] ap_reg_pp1_iter2_tmp_s_reg_442;
reg   [0:0] eol_reg_166;
reg   [10:0] xi_reg_178;
reg   [0:0] eol_1_reg_189;
reg   [23:0] axis_reader_data_V_1_reg_200;
reg   [0:0] axis_reader_last_V_2_reg_211;
reg   [23:0] axis_reader_data_V_2_reg_224;
reg   [0:0] axis_reader_last_V_3_reg_247;
reg   [23:0] axis_reader_data_V_3_reg_259;
reg   [23:0] tmp_data_V_reg_413;
reg   [0:0] tmp_last_V_reg_421;
wire   [0:0] exitcond_fu_290_p2;
wire    ap_CS_fsm_state4;
wire   [9:0] yi_1_fu_296_p2;
reg   [9:0] yi_1_reg_437;
wire   [0:0] tmp_s_fu_302_p2;
wire    ap_block_state5_pp1_stage0_iter0;
reg    ap_predicate_op50_read_state6;
reg    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
reg    ap_block_state8_pp1_stage0_iter3;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] ap_reg_pp1_iter1_tmp_s_reg_442;
wire   [10:0] xi_1_fu_308_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] brmerge_fu_317_p2;
wire   [22:0] p_s_fu_389_p2;
reg   [22:0] p_s_reg_455;
reg   [7:0] p_1_cast_reg_460;
reg   [7:0] tmp_3_reg_465;
wire   [7:0] phitmp2_fu_381_p3;
reg   [7:0] phitmp2_reg_470;
wire    ap_block_state10_pp2_stage0_iter0;
reg    ap_block_state11_pp2_stage0_iter1;
reg    ap_block_pp2_stage0_11001;
reg    ap_block_pp1_stage0_subdone;
reg    ap_enable_reg_pp1_iter2;
reg    ap_condition_pp1_exit_iter1_state6;
reg    ap_enable_reg_pp2_iter0;
wire    ap_CS_fsm_state9;
reg    ap_block_pp2_stage0_subdone;
reg   [0:0] ap_phi_mux_eol_2_phi_fu_239_p4;
reg   [0:0] axis_reader_last_V1_reg_135;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state12;
reg   [23:0] axis_reader_data_V1_reg_145;
reg   [9:0] yi_reg_155;
reg   [0:0] ap_phi_mux_axis_reader_last_V_2_phi_fu_216_p4;
reg   [0:0] ap_phi_mux_eol_phi_fu_170_p4;
reg   [0:0] ap_phi_mux_eol_1_phi_fu_192_p4;
reg   [23:0] ap_phi_mux_axis_reader_data_V_1_phi_fu_203_p4;
wire   [0:0] ap_phi_reg_pp1_iter1_axis_reader_last_V_2_reg_211;
reg   [23:0] ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4;
wire   [23:0] ap_phi_reg_pp1_iter1_axis_reader_data_V_2_reg_224;
reg    ap_block_pp1_stage0_01001;
reg   [0:0] sof_1_fu_106;
wire   [7:0] r_V_fu_328_p1;
wire   [22:0] grp_fu_405_p3;
wire   [24:0] grp_fu_395_p3;
wire   [0:0] tmp_21_fu_365_p3;
wire   [7:0] tmp_8_fu_372_p4;
wire   [14:0] p_s_fu_389_p0;
wire   [7:0] p_s_fu_389_p1;
wire   [16:0] grp_fu_395_p0;
wire   [7:0] grp_fu_395_p1;
wire   [22:0] grp_fu_395_p2;
wire   [15:0] grp_fu_405_p0;
wire   [7:0] grp_fu_405_p1;
wire   [0:0] tmp_user_V_fu_281_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [24:0] grp_fu_395_p10;
wire   [24:0] grp_fu_395_p20;
wire   [22:0] grp_fu_405_p10;
wire   [22:0] p_s_fu_389_p10;
reg    ap_condition_640;
reg    ap_condition_637;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 axis_src_V_data_V_0_sel_rd = 1'b0;
#0 axis_src_V_data_V_0_sel_wr = 1'b0;
#0 axis_src_V_data_V_0_state = 2'd0;
#0 axis_src_V_user_V_0_sel_rd = 1'b0;
#0 axis_src_V_user_V_0_sel_wr = 1'b0;
#0 axis_src_V_user_V_0_state = 2'd0;
#0 axis_src_V_last_V_0_sel_rd = 1'b0;
#0 axis_src_V_last_V_0_sel_wr = 1'b0;
#0 axis_src_V_last_V_0_state = 2'd0;
#0 axis_src_V_dest_V_0_state = 2'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
end

canny_edge_detectbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
canny_edge_detectbkb_U1(
    .din0(p_s_fu_389_p0),
    .din1(p_s_fu_389_p1),
    .dout(p_s_fu_389_p2)
);

canny_edge_detectcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 23 ),
    .dout_WIDTH( 25 ))
canny_edge_detectcud_U2(
    .din0(grp_fu_395_p0),
    .din1(grp_fu_395_p1),
    .din2(grp_fu_395_p2),
    .dout(grp_fu_395_p3)
);

canny_edge_detectdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 23 ),
    .dout_WIDTH( 23 ))
canny_edge_detectdEe_U3(
    .din0(grp_fu_405_p0),
    .din1(grp_fu_405_p1),
    .din2(p_s_reg_455),
    .dout(grp_fu_405_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((tmp_s_fu_302_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((exitcond_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter1_state6)) begin
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if (((exitcond_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((ap_phi_mux_eol_2_phi_fu_239_p4 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_src_V_data_V_0_ack_out == 1'b1) & (axis_src_V_data_V_0_vld_out == 1'b1))) begin
            axis_src_V_data_V_0_sel_rd <= ~axis_src_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_src_V_data_V_0_ack_in == 1'b1) & (axis_src_V_data_V_0_vld_in == 1'b1))) begin
            axis_src_V_data_V_0_sel_wr <= ~axis_src_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((axis_src_V_data_V_0_state == 2'd2) & (axis_src_V_data_V_0_vld_in == 1'b0)) | ((axis_src_V_data_V_0_state == 2'd3) & (axis_src_V_data_V_0_vld_in == 1'b0) & (axis_src_V_data_V_0_ack_out == 1'b1)))) begin
            axis_src_V_data_V_0_state <= 2'd2;
        end else if ((((axis_src_V_data_V_0_state == 2'd1) & (axis_src_V_data_V_0_ack_out == 1'b0)) | ((axis_src_V_data_V_0_state == 2'd3) & (axis_src_V_data_V_0_ack_out == 1'b0) & (axis_src_V_data_V_0_vld_in == 1'b1)))) begin
            axis_src_V_data_V_0_state <= 2'd1;
        end else if (((~((axis_src_V_data_V_0_vld_in == 1'b0) & (axis_src_V_data_V_0_ack_out == 1'b1)) & ~((axis_src_V_data_V_0_ack_out == 1'b0) & (axis_src_V_data_V_0_vld_in == 1'b1)) & (axis_src_V_data_V_0_state == 2'd3)) | ((axis_src_V_data_V_0_state == 2'd1) & (axis_src_V_data_V_0_ack_out == 1'b1)) | ((axis_src_V_data_V_0_state == 2'd2) & (axis_src_V_data_V_0_vld_in == 1'b1)))) begin
            axis_src_V_data_V_0_state <= 2'd3;
        end else begin
            axis_src_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((axis_src_V_dest_V_0_state == 2'd2) & (axis_src_V_dest_V_0_vld_in == 1'b0)) | ((axis_src_V_dest_V_0_state == 2'd3) & (axis_src_V_dest_V_0_vld_in == 1'b0) & (axis_src_V_dest_V_0_ack_out == 1'b1)))) begin
            axis_src_V_dest_V_0_state <= 2'd2;
        end else if ((((axis_src_V_dest_V_0_state == 2'd1) & (axis_src_V_dest_V_0_ack_out == 1'b0)) | ((axis_src_V_dest_V_0_state == 2'd3) & (axis_src_V_dest_V_0_ack_out == 1'b0) & (axis_src_V_dest_V_0_vld_in == 1'b1)))) begin
            axis_src_V_dest_V_0_state <= 2'd1;
        end else if (((~((axis_src_V_dest_V_0_vld_in == 1'b0) & (axis_src_V_dest_V_0_ack_out == 1'b1)) & ~((axis_src_V_dest_V_0_ack_out == 1'b0) & (axis_src_V_dest_V_0_vld_in == 1'b1)) & (axis_src_V_dest_V_0_state == 2'd3)) | ((axis_src_V_dest_V_0_state == 2'd1) & (axis_src_V_dest_V_0_ack_out == 1'b1)) | ((axis_src_V_dest_V_0_state == 2'd2) & (axis_src_V_dest_V_0_vld_in == 1'b1)))) begin
            axis_src_V_dest_V_0_state <= 2'd3;
        end else begin
            axis_src_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_src_V_last_V_0_ack_out == 1'b1) & (axis_src_V_last_V_0_vld_out == 1'b1))) begin
            axis_src_V_last_V_0_sel_rd <= ~axis_src_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_src_V_last_V_0_ack_in == 1'b1) & (axis_src_V_last_V_0_vld_in == 1'b1))) begin
            axis_src_V_last_V_0_sel_wr <= ~axis_src_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((axis_src_V_last_V_0_state == 2'd2) & (axis_src_V_last_V_0_vld_in == 1'b0)) | ((axis_src_V_last_V_0_state == 2'd3) & (axis_src_V_last_V_0_vld_in == 1'b0) & (axis_src_V_last_V_0_ack_out == 1'b1)))) begin
            axis_src_V_last_V_0_state <= 2'd2;
        end else if ((((axis_src_V_last_V_0_state == 2'd1) & (axis_src_V_last_V_0_ack_out == 1'b0)) | ((axis_src_V_last_V_0_state == 2'd3) & (axis_src_V_last_V_0_ack_out == 1'b0) & (axis_src_V_last_V_0_vld_in == 1'b1)))) begin
            axis_src_V_last_V_0_state <= 2'd1;
        end else if (((~((axis_src_V_last_V_0_vld_in == 1'b0) & (axis_src_V_last_V_0_ack_out == 1'b1)) & ~((axis_src_V_last_V_0_ack_out == 1'b0) & (axis_src_V_last_V_0_vld_in == 1'b1)) & (axis_src_V_last_V_0_state == 2'd3)) | ((axis_src_V_last_V_0_state == 2'd1) & (axis_src_V_last_V_0_ack_out == 1'b1)) | ((axis_src_V_last_V_0_state == 2'd2) & (axis_src_V_last_V_0_vld_in == 1'b1)))) begin
            axis_src_V_last_V_0_state <= 2'd3;
        end else begin
            axis_src_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_src_V_user_V_0_ack_out == 1'b1) & (axis_src_V_user_V_0_vld_out == 1'b1))) begin
            axis_src_V_user_V_0_sel_rd <= ~axis_src_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_src_V_user_V_0_ack_in == 1'b1) & (axis_src_V_user_V_0_vld_in == 1'b1))) begin
            axis_src_V_user_V_0_sel_wr <= ~axis_src_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((axis_src_V_user_V_0_state == 2'd2) & (axis_src_V_user_V_0_vld_in == 1'b0)) | ((axis_src_V_user_V_0_state == 2'd3) & (axis_src_V_user_V_0_vld_in == 1'b0) & (axis_src_V_user_V_0_ack_out == 1'b1)))) begin
            axis_src_V_user_V_0_state <= 2'd2;
        end else if ((((axis_src_V_user_V_0_state == 2'd1) & (axis_src_V_user_V_0_ack_out == 1'b0)) | ((axis_src_V_user_V_0_state == 2'd3) & (axis_src_V_user_V_0_ack_out == 1'b0) & (axis_src_V_user_V_0_vld_in == 1'b1)))) begin
            axis_src_V_user_V_0_state <= 2'd1;
        end else if (((~((axis_src_V_user_V_0_vld_in == 1'b0) & (axis_src_V_user_V_0_ack_out == 1'b1)) & ~((axis_src_V_user_V_0_ack_out == 1'b0) & (axis_src_V_user_V_0_vld_in == 1'b1)) & (axis_src_V_user_V_0_state == 2'd3)) | ((axis_src_V_user_V_0_state == 2'd1) & (axis_src_V_user_V_0_ack_out == 1'b1)) | ((axis_src_V_user_V_0_state == 2'd2) & (axis_src_V_user_V_0_vld_in == 1'b1)))) begin
            axis_src_V_user_V_0_state <= 2'd3;
        end else begin
            axis_src_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        axis_reader_data_V1_reg_145 <= axis_reader_data_V_3_reg_259;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        axis_reader_data_V1_reg_145 <= tmp_data_V_reg_413;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        axis_reader_data_V_1_reg_200 <= axis_reader_data_V1_reg_145;
    end else if (((ap_reg_pp1_iter1_tmp_s_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        axis_reader_data_V_1_reg_200 <= axis_reader_data_V_2_reg_224;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_637)) begin
        if (((brmerge_reg_451 == 1'd1) & (tmp_s_reg_442 == 1'd0))) begin
            axis_reader_data_V_2_reg_224 <= ap_phi_mux_axis_reader_data_V_1_phi_fu_203_p4;
        end else if (((brmerge_reg_451 == 1'd0) & (tmp_s_reg_442 == 1'd0))) begin
            axis_reader_data_V_2_reg_224 <= axis_src_V_data_V_0_data_out;
        end else if ((1'b1 == 1'b1)) begin
            axis_reader_data_V_2_reg_224 <= ap_phi_reg_pp1_iter1_axis_reader_data_V_2_reg_224;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        axis_reader_data_V_3_reg_259 <= axis_reader_data_V_1_reg_200;
    end else if (((eol_2_reg_236 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        axis_reader_data_V_3_reg_259 <= axis_src_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        axis_reader_last_V1_reg_135 <= axis_reader_last_V_3_reg_247;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        axis_reader_last_V1_reg_135 <= tmp_last_V_reg_421;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_637)) begin
        if (((brmerge_reg_451 == 1'd1) & (tmp_s_reg_442 == 1'd0))) begin
            axis_reader_last_V_2_reg_211 <= ap_phi_mux_eol_1_phi_fu_192_p4;
        end else if (((brmerge_reg_451 == 1'd0) & (tmp_s_reg_442 == 1'd0))) begin
            axis_reader_last_V_2_reg_211 <= axis_src_V_last_V_0_data_out;
        end else if ((1'b1 == 1'b1)) begin
            axis_reader_last_V_2_reg_211 <= ap_phi_reg_pp1_iter1_axis_reader_last_V_2_reg_211;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        axis_reader_last_V_3_reg_247 <= eol_1_reg_189;
    end else if (((eol_2_reg_236 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        axis_reader_last_V_3_reg_247 <= axis_src_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_1_reg_189 <= axis_reader_last_V1_reg_135;
    end else if (((ap_reg_pp1_iter1_tmp_s_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        eol_1_reg_189 <= axis_reader_last_V_2_reg_211;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        eol_2_reg_236 <= eol_reg_166;
    end else if (((eol_2_reg_236 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        eol_2_reg_236 <= axis_src_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_reg_166 <= 1'd0;
    end else if (((tmp_s_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_reg_166 <= ap_phi_mux_axis_reader_last_V_2_phi_fu_216_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_302_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sof_1_fu_106 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sof_1_fu_106 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        xi_reg_178 <= 11'd0;
    end else if (((tmp_s_fu_302_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        xi_reg_178 <= xi_1_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        yi_reg_155 <= yi_1_reg_437;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        yi_reg_155 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_reg_pp1_iter1_tmp_s_reg_442 <= tmp_s_reg_442;
        tmp_s_reg_442 <= tmp_s_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        ap_reg_pp1_iter2_tmp_s_reg_442 <= ap_reg_pp1_iter1_tmp_s_reg_442;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_src_V_data_V_0_load_A == 1'b1)) begin
        axis_src_V_data_V_0_payload_A <= axis_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_src_V_data_V_0_load_B == 1'b1)) begin
        axis_src_V_data_V_0_payload_B <= axis_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_src_V_last_V_0_load_A == 1'b1)) begin
        axis_src_V_last_V_0_payload_A <= axis_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_src_V_last_V_0_load_B == 1'b1)) begin
        axis_src_V_last_V_0_payload_B <= axis_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_src_V_user_V_0_load_A == 1'b1)) begin
        axis_src_V_user_V_0_payload_A <= axis_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_src_V_user_V_0_load_B == 1'b1)) begin
        axis_src_V_user_V_0_payload_B <= axis_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_302_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        brmerge_reg_451 <= brmerge_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_1_cast_reg_460 <= {{ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4[15:8]}};
        p_s_reg_455 <= p_s_fu_389_p2;
        tmp_3_reg_465 <= {{ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp1_iter1_tmp_s_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        phitmp2_reg_470 <= phitmp2_fu_381_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((axis_src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_V_reg_413 <= axis_src_V_data_V_0_data_out;
        tmp_last_V_reg_421 <= axis_src_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        yi_1_reg_437 <= yi_1_fu_296_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_condition_pp1_exit_iter1_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp1_iter1_tmp_s_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        ap_phi_mux_axis_reader_data_V_1_phi_fu_203_p4 = axis_reader_data_V_2_reg_224;
    end else begin
        ap_phi_mux_axis_reader_data_V_1_phi_fu_203_p4 = axis_reader_data_V_1_reg_200;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_640)) begin
        if ((brmerge_reg_451 == 1'd1)) begin
            ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4 = ap_phi_mux_axis_reader_data_V_1_phi_fu_203_p4;
        end else if ((brmerge_reg_451 == 1'd0)) begin
            ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4 = axis_src_V_data_V_0_data_out;
        end else begin
            ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4 = ap_phi_reg_pp1_iter1_axis_reader_data_V_2_reg_224;
        end
    end else begin
        ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4 = ap_phi_reg_pp1_iter1_axis_reader_data_V_2_reg_224;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_640)) begin
        if ((brmerge_reg_451 == 1'd1)) begin
            ap_phi_mux_axis_reader_last_V_2_phi_fu_216_p4 = ap_phi_mux_eol_1_phi_fu_192_p4;
        end else if ((brmerge_reg_451 == 1'd0)) begin
            ap_phi_mux_axis_reader_last_V_2_phi_fu_216_p4 = axis_src_V_last_V_0_data_out;
        end else begin
            ap_phi_mux_axis_reader_last_V_2_phi_fu_216_p4 = ap_phi_reg_pp1_iter1_axis_reader_last_V_2_reg_211;
        end
    end else begin
        ap_phi_mux_axis_reader_last_V_2_phi_fu_216_p4 = ap_phi_reg_pp1_iter1_axis_reader_last_V_2_reg_211;
    end
end

always @ (*) begin
    if (((ap_reg_pp1_iter1_tmp_s_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        ap_phi_mux_eol_1_phi_fu_192_p4 = axis_reader_last_V_2_reg_211;
    end else begin
        ap_phi_mux_eol_1_phi_fu_192_p4 = eol_1_reg_189;
    end
end

always @ (*) begin
    if (((eol_2_reg_236 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_eol_2_phi_fu_239_p4 = axis_src_V_last_V_0_data_out;
    end else begin
        ap_phi_mux_eol_2_phi_fu_239_p4 = eol_2_reg_236;
    end
end

always @ (*) begin
    if (((tmp_s_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_phi_fu_170_p4 = ap_phi_mux_axis_reader_last_V_2_phi_fu_216_p4;
    end else begin
        ap_phi_mux_eol_phi_fu_170_p4 = eol_reg_166;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((eol_2_reg_236 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((brmerge_reg_451 == 1'd0) & (tmp_s_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        axis_in_TDATA_blk_n = axis_src_V_data_V_0_state[1'd0];
    end else begin
        axis_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((eol_2_reg_236 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_predicate_op50_read_state6 == 1'b1)) | ((axis_src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        axis_src_V_data_V_0_ack_out = 1'b1;
    end else begin
        axis_src_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_src_V_data_V_0_sel == 1'b1)) begin
        axis_src_V_data_V_0_data_out = axis_src_V_data_V_0_payload_B;
    end else begin
        axis_src_V_data_V_0_data_out = axis_src_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((eol_2_reg_236 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_predicate_op50_read_state6 == 1'b1)) | ((axis_src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        axis_src_V_dest_V_0_ack_out = 1'b1;
    end else begin
        axis_src_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((eol_2_reg_236 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_predicate_op50_read_state6 == 1'b1)) | ((axis_src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        axis_src_V_last_V_0_ack_out = 1'b1;
    end else begin
        axis_src_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_src_V_last_V_0_sel == 1'b1)) begin
        axis_src_V_last_V_0_data_out = axis_src_V_last_V_0_payload_B;
    end else begin
        axis_src_V_last_V_0_data_out = axis_src_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((eol_2_reg_236 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_predicate_op50_read_state6 == 1'b1)) | ((axis_src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        axis_src_V_user_V_0_ack_out = 1'b1;
    end else begin
        axis_src_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_src_V_user_V_0_sel == 1'b1)) begin
        axis_src_V_user_V_0_data_out = axis_src_V_user_V_0_payload_B;
    end else begin
        axis_src_V_user_V_0_data_out = axis_src_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_reg_pp1_iter2_tmp_s_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        fifo1_blk_n = fifo1_full_n;
    end else begin
        fifo1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp1_iter2_tmp_s_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        fifo1_write = 1'b1;
    end else begin
        fifo1_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_user_V_fu_281_p1 == 1'd0) & (axis_src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((tmp_user_V_fu_281_p1 == 1'd1) & (axis_src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) & ~((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((ap_reg_pp1_iter2_tmp_s_reg_442 == 1'd0) & (fifo1_full_n == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((axis_src_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_predicate_op50_read_state6 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_reg_pp1_iter2_tmp_s_reg_442 == 1'd0) & (fifo1_full_n == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((axis_src_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_predicate_op50_read_state6 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_reg_pp1_iter2_tmp_s_reg_442 == 1'd0) & (fifo1_full_n == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((axis_src_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_predicate_op50_read_state6 == 1'b1)));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((eol_2_reg_236 == 1'd0) & (axis_src_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((eol_2_reg_236 == 1'd0) & (axis_src_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp2_stage0_iter1 = ((eol_2_reg_236 == 1'd0) & (axis_src_V_data_V_0_vld_out == 1'b0));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = ((axis_src_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op50_read_state6 == 1'b1));
end

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp1_stage0_iter3 = ((ap_reg_pp1_iter2_tmp_s_reg_442 == 1'd0) & (fifo1_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_637 = ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

always @ (*) begin
    ap_condition_640 = ((tmp_s_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_phi_reg_pp1_iter1_axis_reader_data_V_2_reg_224 = 'bx;

assign ap_phi_reg_pp1_iter1_axis_reader_last_V_2_reg_211 = 'bx;

always @ (*) begin
    ap_predicate_op50_read_state6 = ((brmerge_reg_451 == 1'd0) & (tmp_s_reg_442 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign axis_in_TREADY = axis_src_V_dest_V_0_state[1'd1];

assign axis_src_V_data_V_0_ack_in = axis_src_V_data_V_0_state[1'd1];

assign axis_src_V_data_V_0_load_A = (~axis_src_V_data_V_0_sel_wr & axis_src_V_data_V_0_state_cmp_full);

assign axis_src_V_data_V_0_load_B = (axis_src_V_data_V_0_state_cmp_full & axis_src_V_data_V_0_sel_wr);

assign axis_src_V_data_V_0_sel = axis_src_V_data_V_0_sel_rd;

assign axis_src_V_data_V_0_state_cmp_full = ((axis_src_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_src_V_data_V_0_vld_in = axis_in_TVALID;

assign axis_src_V_data_V_0_vld_out = axis_src_V_data_V_0_state[1'd0];

assign axis_src_V_dest_V_0_vld_in = axis_in_TVALID;

assign axis_src_V_last_V_0_ack_in = axis_src_V_last_V_0_state[1'd1];

assign axis_src_V_last_V_0_load_A = (~axis_src_V_last_V_0_sel_wr & axis_src_V_last_V_0_state_cmp_full);

assign axis_src_V_last_V_0_load_B = (axis_src_V_last_V_0_state_cmp_full & axis_src_V_last_V_0_sel_wr);

assign axis_src_V_last_V_0_sel = axis_src_V_last_V_0_sel_rd;

assign axis_src_V_last_V_0_state_cmp_full = ((axis_src_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_src_V_last_V_0_vld_in = axis_in_TVALID;

assign axis_src_V_last_V_0_vld_out = axis_src_V_last_V_0_state[1'd0];

assign axis_src_V_user_V_0_ack_in = axis_src_V_user_V_0_state[1'd1];

assign axis_src_V_user_V_0_load_A = (~axis_src_V_user_V_0_sel_wr & axis_src_V_user_V_0_state_cmp_full);

assign axis_src_V_user_V_0_load_B = (axis_src_V_user_V_0_state_cmp_full & axis_src_V_user_V_0_sel_wr);

assign axis_src_V_user_V_0_sel = axis_src_V_user_V_0_sel_rd;

assign axis_src_V_user_V_0_state_cmp_full = ((axis_src_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_src_V_user_V_0_vld_in = axis_in_TVALID;

assign axis_src_V_user_V_0_vld_out = axis_src_V_user_V_0_state[1'd0];

assign brmerge_fu_317_p2 = (sof_1_fu_106 | ap_phi_mux_eol_phi_fu_170_p4);

assign exitcond_fu_290_p2 = ((yi_reg_155 == 10'd720) ? 1'b1 : 1'b0);

assign fifo1_din = phitmp2_reg_470;

assign grp_fu_395_p0 = 25'd38469;

assign grp_fu_395_p1 = grp_fu_395_p10;

assign grp_fu_395_p10 = p_1_cast_reg_460;

assign grp_fu_395_p2 = grp_fu_395_p20;

assign grp_fu_395_p20 = grp_fu_405_p3;

assign grp_fu_405_p0 = 23'd19595;

assign grp_fu_405_p1 = grp_fu_405_p10;

assign grp_fu_405_p10 = tmp_3_reg_465;

assign p_s_fu_389_p0 = 23'd9437;

assign p_s_fu_389_p1 = p_s_fu_389_p10;

assign p_s_fu_389_p10 = r_V_fu_328_p1;

assign phitmp2_fu_381_p3 = ((tmp_21_fu_365_p3[0:0] === 1'b1) ? 8'd255 : tmp_8_fu_372_p4);

assign r_V_fu_328_p1 = ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4[7:0];

assign start_out = real_start;

assign tmp_21_fu_365_p3 = grp_fu_395_p3[32'd24];

assign tmp_8_fu_372_p4 = {{grp_fu_395_p3[23:16]}};

assign tmp_s_fu_302_p2 = ((xi_reg_178 == 11'd1280) ? 1'b1 : 1'b0);

assign tmp_user_V_fu_281_p1 = axis_src_V_user_V_0_data_out;

assign xi_1_fu_308_p2 = (xi_reg_178 + 11'd1);

assign yi_1_fu_296_p2 = (yi_reg_155 + 10'd1);

endmodule //AXIS2GrayArray
