#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdint.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/ioctl.h>
#include <linux/i2c-dev.h>
#include <math.h>
#include <stdlib.h>


/* ------------------------------------------------------------ */
/*                  Definitions                                 */
/* ------------------------------------------------------------ */
#define PMON_NO_BITS           10
#define PMON_I2C_ADDR          0x2f  //TODO
#define PMON_CONV_OFFSET_G_LSB (15.6 * 0.001) // Convert offset (g) to LSB,
											 // 15.6 mg/LSB


/* ------------------------------------------------------------ */
/*                  Parameters Definitions                      */
/* ------------------------------------------------------------ */

#define CONVERT_VOLTAGE_CONTINUOUSLY 0
#define CONVERT_VOLTAGE_ONCE 1
#define CONVERT_CURRENT_CONTINUOUSLY 2
#define CONVERT_CURRENT_ONCE 3
#define VRANGE 4
#define STATUS_READ 6
#define NONE 0







// My WORKSPACE

int init() {

	int fd;
	if ((fd = open("/dev/i2c-1", O_RDWR)) < 0) {
		/* ERROR HANDLING: you can check errno to see what went wrong */
		printf("Failed to open the i2c bus\n");
		return -1;
	}
	printf("Opened the bus\n");

	if (ioctl(fd, I2C_SLAVE_FORCE, PMON_I2C_ADDR) < 0) {
		printf("Failed to acquire bus access and/or talk to slave.\n");
		/* ERROR HANDLING; you can check errno to see what went wrong */
		return -1;
	}

	printf("Opened device \n");
	return fd;
}


int readData(int fd, uint8_t *data, uint8_t length) {
	int result = read(fd, data, length);

	if (result != length) {
		printf("Failed to read %d bytes from the i2c bus. Read %d bytes instead.\n", length, result);
		return result;
	}
	else {
		return length;
	}
}

int writeData(int fd, uint8_t *data, uint8_t length) {
	int result = write(fd, data, length);

	if (result != length) {
		printf("Failed to write %d bytes on the i2c bus. Wrote %d bytes instead.\n", length, result);
		return result;
	}
	else {
		return length;
	}
}

float ConvertADCtoVoltage(uint8_t msb, uint8_t lsb) {
	double result;
	uint16_t LSB = lsb, MSB = msb;
	/*uint8_t msb_reverse =0, lsb_reverse = 0;

	for(int i = 0;i<8;i++){
		if((msb & (1 << i)))
			msb_reverse |= 1 << ((8 - 1) - i);

		if((lsb & (1 << i)))
			lsb_reverse |= 1 << ((8 - 1) - i);
	}*/

	uint16_t voltageCode = (((MSB << 4) | (LSB >> 4)));
	float fullscale = 26.25;
	float range = 4096;


	result =  (fullscale / range) * voltageCode;
	return result;
}

float ConvertADCtoCurrent(uint8_t msb, uint8_t lsb) {
	double result;
	uint16_t LSB = lsb, MSB = msb;
	uint16_t currentCode = (MSB << 4) | (LSB & 0x0F);
	float fullscale = 0.10584;
	float range = 4096;
	float resistance = 10;

	result =  ((fullscale / range)* currentCode) * resistance;
	return result;
}


void Pmon_VoltageCurrentRead(int fd, float *voltage, float *current) {
	uint8_t dataBytes[4];
	dataBytes[0] = 0;
	dataBytes[1] = 0;
	dataBytes[2] = 0;
	dataBytes[3] = 0;
	readData(fd, (uint8_t *)dataBytes, 4);
	printf("Before converting: %d %d %d %d da\n",dataBytes[0], dataBytes[1], dataBytes[2], dataBytes[3]);

	*voltage = ConvertADCtoVoltage(dataBytes[1], dataBytes[3]);
	*current = ConvertADCtoCurrent(dataBytes[2], dataBytes[3]);
}

void checIfAlive(int fd){
	uint8_t data = NONE;
	if( writeData(fd, &data, 0) == 0) {
		printf("Pmon is alive! \n");
	}
}


