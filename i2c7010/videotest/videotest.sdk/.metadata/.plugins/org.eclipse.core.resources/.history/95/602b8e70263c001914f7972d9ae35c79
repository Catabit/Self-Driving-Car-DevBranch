#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdint.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/ioctl.h>
#include <linux/i2c-dev.h>
#include <stdio.h>

/* PmodACL.h -- PmodACL Driver Definitions                                    */

#ifndef PMODACL_H
#define PMODACL_H
/* ------------------------------------------------------------ */
/*                  Definitions                                 */
/* ------------------------------------------------------------ */
#define ACL_NO_BITS           10
#define ACL_I2C_ADDR          0x1D
#define ACL_CONV_OFFSET_G_LSB (15.6 * 0.001) // Convert offset (g) to LSB,
                                             // 15.6 mg/LSB

/* ------------------------------------------------------------ */
/*                  Register Addresses Definitions              */
/* ------------------------------------------------------------ */

#define ACL_REG_DEVID         0x00
#define ACL_REG_OFSX          0x1E
#define ACL_REG_OFSY          0x1F
#define ACL_REG_OFSZ          0x20
#define ACL_REG_DUR           0x21
#define ACL_REG_LATENT        0x22
#define ACL_REG_WINDOW        0x23
#define ACL_REG_THRESH_ACT    0x24
#define ACL_REG_THRESH_INACT  0x25
#define ACL_REG_TIME_INACT    0x26
#define ACL_REG_ACT_INACT_CTL 0x27
#define ACL_REG_THRESH_FF     0x28
#define ACL_REG_TIME_FF       0x29
#define ACL_REG_BW_RATE       0x2C
#define ACL_REG_POWER_CTL     0x2D
#define ACL_REG_INT_ENABLE    0x2E
#define ACL_REG_INT_MAP       0x2F
#define ACL_REG_INT_SOURCE    0x30
#define ACL_REG_DATA_FORMAT   0x31
#define ACL_REG_DATAX0        0x32
#define ACL_REG_DATAX1        0x33
#define ACL_REG_DATAY0        0x34
#define ACL_REG_DATAY1        0x35
#define ACL_REG_DATAZ0        0x36
#define ACL_REG_DATAZ1        0x37
#define ACL_REG_FIFO_CTL      0x38
#define ACL_REG_FIFO_STATUS   0x39

/* ------------------------------------------------------------ */
/*                  Bit Masks Definitions                       */
/* ------------------------------------------------------------ */

#define ACL_MSK_POWER_CTL_MEASURE  1<<3
#define ACL_MSK_DATA_FORMAT_RANGE0 1<<0
#define ACL_MSK_DATA_FORMAT_RANGE1 1<<1

/* ------------------------------------------------------------ */
/*                  Parameters Definitions                      */
/* ------------------------------------------------------------ */

#define ACL_PAR_ACCESS_DSPI0 0
#define ACL_PAR_ACCESS_DSPI1 1
#define ACL_PAR_ACCESS_DSPI2 2
#define ACL_PAR_ACCESS_I2C   10
#define ACL_PAR_GRANGE_PM2G  0
#define ACL_PAR_GRANGE_PM4G  1
#define ACL_PAR_GRANGE_PM8G  2
#define ACL_PAR_GRANGE_PM16G 3
#define ACL_PAR_AXIS_XP      0
#define ACL_PAR_AXIS_XN      1
#define ACL_PAR_AXIS_YP      2
#define ACL_PAR_AXIS_YN      3
#define ACL_PAR_AXIS_ZP      4
#define ACL_PAR_AXIS_ZN      5
#define ACL_PAR_AXIS_X       0
#define ACL_PAR_AXIS_Y       1
#define ACL_PAR_AXIS_Z       2

/* ------------------------------------------------------------ */
/*                  Procedure Declarations                      */
/* ------------------------------------------------------------ */

// My workspace
int init(){

	int fd;
	if ((fd = open("/dev/i2c-1", O_RDWR)) < 0) {
		/* ERROR HANDLING: you can check errno to see what went wrong */
		printf("Failed to open the i2c bus\n");
		return -1;
	}
	printf("Opened the bus\n");

	if (ioctl(fd,I2C_SLAVE_FORCE ,ACL_I2C_ADDR) < 0 ) {
		printf("Failed to acquire bus access and/or talk to slave.\n");
		/* ERROR HANDLING; you can check errno to see what went wrong */
		return -1;
	}

	printf("Opened device \n");
	return fd;
}



/* ------------------------------------------------------------ */
/*** void ACL_WriteSpi(PmodACL *InstancePtr, u8 reg, u8 *wData, int nData)
**
**   Parameters:
**      InstancePtr: the PmodACL device to communicate with
**      reg:         the starting register to write to
**      wData:       the data to write
**      nData:       the number of data bytes to write
**
**   Return Value:
**      none
**
**   Description:
**      Writes the byte array to the chip via SPI. It will write the first byte
**      into the specified register, then the next into the following register
**      until all of the data has been sent.
*/
void ACL_WriteSpi(PmodACL *InstancePtr, u8 reg, u8 *wData, int nData) {
   // As requested by documentation, first byte contains:
   //    bit 7 =    0 because is a write operation
   //    bit 6 =    1 if more than one bytes is written, 0 if a single byte is
   //               written
   //    bits 5-0 = the address
   u8 bytearray[nData + 1];
   int i;
   bytearray[0] = ((nData > 1) ? 0x40 : 0) | (reg & 0x3F);
   for (i = 0; i < nData; i++) {
      bytearray[i + 1] = wData[i];
   }
   XSpi_Transfer(&InstancePtr->ACLSpi, bytearray, 0, nData + 1);
}

/* ------------------------------------------------------------ */
/*** void ACL_ReadSpi(PmodACL *InstancePtr, u8 reg, u8 *rData, int nData)
**
**   Parameters:
**      InstancePtr: the PmodACL device to communicate with
**      reg:         the starting register to read from
**      rData:       the byte array to read into
**      nData:       the number of data bytes to read
**
**   Return Value:
**      none
**
**   Description:
**      Reads data in through SPI. It will read the first byte from the starting
**      register, then the next from the following register. Data is stored into
**      rData.
*/
void ACL_ReadSpi(PmodACL *InstancePtr, u8 reg, u8 *rData, int nData) {
   // As requested by documentation, first byte contains:
   //    bit 7 =    1 because is a read operation
   //    bit 6 =    1 if more than one bytes is written, 0 if a single byte is
   //               written
   //    bits 5-0 - the address
   u8 bytearray[nData + 1];
   int i;

   bytearray[0] = ((nData > 1) ? 0xC0 : 0x80) | (reg & 0x3F);
   XSpi_Transfer(&InstancePtr->ACLSpi, bytearray, bytearray, nData + 1);
   for (i = 0; i < nData; i++) {
      rData[i] = bytearray[i + 1];
   }
}

/* ------------------------------------------------------------ */
/*** void ACL_SetMeasure(PmodACL *InstancePtr, u8 fMeasure)
**
**   Parameters:
**      InstancePtr: the PmodACL device to communicate with
**      fMeasure:    the value to be set for MEASURE bit of POWER_CTL register
**
**   Return Value:
**      None
**
**   Description:
**      This function sets the MEASURE bit of POWER_CTL register. This toggles
**      between measurement and standby mode.
**
**
**      0 - StandBy Mode
**      1 - Measurement Mode
**
*/
void ACL_SetMeasure(PmodACL *InstancePtr, u8 fMeasure) {
   ACL_SetRegisterBits(InstancePtr, ACL_REG_POWER_CTL,
         ACL_MSK_POWER_CTL_MEASURE, fMeasure);
}










//
/*
void ACL_begin(PmodACL *InstancePtr, u32 GPIO_Address, u32 SPI_Address);
int ACL_SPIInit(XSpi *SpiInstancePtr);

void ACL_WriteSpi(PmodACL *InstancePtr, u8 reg, u8 *wData, int nData);
void ACL_ReadSpi(PmodACL *InstancePtr, u8 reg, u8 *rData, int nData);
void ACL_SetRegisterBits(PmodACL *InstancePtr, u8 reg, u8 mask, u8 fValue);
u8 ACL_GetRegisterBits(PmodACL *InstancePtr, u8 bRegisterAddress, u8 bMask);

float ACL_ConvertReadingToValueG(PmodACL *InstancePtr, int16_t uiReading);
float ACL_GetGRangeLSB(uint8_t bGRange);
void ACL_ReadAccelG(PmodACL *InstancePtr, float *dAclXg, float *dAclYg,
      float *dAclZg);
void ACL_ReadAccel(PmodACL *InstancePtr, int16_t *iAclX, int16_t *iAclY,
      int16_t *iAclZ);
void ACL_SetMeasure(PmodACL *InstancePtr, u8 fMeasure);
u8 ACL_GetMeasure(PmodACL *InstancePtr);
void ACL_SetGRange(PmodACL *InstancePtr, u8 bGRangePar);
u8 ACL_GetGRange(PmodACL *InstancePtr);
void ACL_SetOffsetG(PmodACL *InstancePtr, u8 bAxisParam, float dOffset);
float ACL_GetOffsetG(PmodACL *InstancePtr, u8 bAxisParam);
void ACL_CalibrateOneAxisGravitational(PmodACL *InstancePtr, u8 bAxisInfo);
*/
#endif // PMODACL_H
