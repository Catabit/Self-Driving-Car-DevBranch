#include "acl.h"
#define QUARTER 0.75
#define SFERT 0.15

void Run(int fd) {
	//int16_t x, y, z;
	float x = 0.0f, y = 0.0f, z = 0.0f;

	printf("ACL Demo Launched\n");

	float first_x = 0.0f, first_y = 0.0f, first_z = 0.0f;
	//float current_heading_speed = 0.0f;
	//float current_speed_x = 0.0f, current_speed_y = 0.0f, last_speed_x = 0.0f, last_speed_y = 0.0f;
	float average_accl_x = 0.0f, average_accl_y = 0.0f, average_accl_z = 0.0f;
	float accl_x = 0.0f, accl_y = 0.0f;

	//Finding initial error offset
	//for (int i = 0; i < 100; i++) {
		//ReadAccel(fd, &x, &y, &z);
		//ACL_ReadAccelG(fd, &x, &y, &z);
		//printf("X=%f\tY=%f\tZ=%f\n\r", x, y, z);
		//usleep(1000);
		//first_x += x;
		//first_y += y;
		//first_z += z;
	//}
	//first_x /= 100.0f;
	//first_y /= 100.0f;
	//first_z /= 100.0f;

	ACL_ReadAccelG(fd, &first_x, &first_y, &first_z);
	printf("FirstValues(%.2f,%.2f)\n", first_x, first_y);

	//while (1) {
	for(int i=0;i<15;i++) {
		average_accl_x = 0.0f;
		average_accl_y = 0.0f;
		average_accl_z = 0.0f;
		for (int i = 0; i < 100; i++) {
			//ReadAccel(fd, &x, &y, &z);
			ACL_ReadAccelG(fd, &x, &y, &z);
			//printf("RawValues(%.2f,%.2f)\n", x, y);
			//printf("X=%f\tY=%f\tZ=%f\n\r", x, y, z);
			usleep(1000);
			average_accl_x += x;
			average_accl_y += y;
			average_accl_z += z;
		}

		average_accl_x /= 100.0f;
		average_accl_y /= 100.0f;
		average_accl_z /= 100.0f;

		//printf("RawValues(%.2f,%.2f)\n", average_accl_x, average_accl_y);

		//Calculating acceleration
		accl_x = average_accl_x * (float) 9.8f;  // m/s^2
		accl_y = average_accl_y * (float) 9.8f; // m/s^2

	}
	printf("Done!\n");
}

void Initialize(int fd) {
	ACL_SetMeasure(fd, 0);
	ACL_SetGRange(fd, ACL_PAR_GRANGE_PM4G);
	ACL_SetMeasure(fd, 1);
	ACL_CalibrateOneAxisGravitational(fd, ACL_PAR_AXIS_ZP);
	sleep(1); // After calibration, some delay is required for the new settings
			  // to take effect.
	printf("Initialize worked\n");
}


int main()
{
	int fd = init();
	printf("Let's start\n");
	Initialize(fd);
	Run(fd);

	return 0;
}

