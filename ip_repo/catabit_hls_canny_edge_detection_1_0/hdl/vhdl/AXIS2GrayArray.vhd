-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXIS2GrayArray is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    axis_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    axis_in_TVALID : IN STD_LOGIC;
    axis_in_TREADY : OUT STD_LOGIC;
    axis_in_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    axis_in_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    axis_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    fifo1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    fifo1_full_n : IN STD_LOGIC;
    fifo1_write : OUT STD_LOGIC );
end;


architecture behav of AXIS2GrayArray is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_24DD : STD_LOGIC_VECTOR (22 downto 0) := "00000000010010011011101";
    constant ap_const_lv25_9645 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001001011001000101";
    constant ap_const_lv23_4C8B : STD_LOGIC_VECTOR (22 downto 0) := "00000000100110010001011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal axis_src_V_data_V_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal axis_src_V_data_V_0_vld_in : STD_LOGIC;
    signal axis_src_V_data_V_0_vld_out : STD_LOGIC;
    signal axis_src_V_data_V_0_ack_in : STD_LOGIC;
    signal axis_src_V_data_V_0_ack_out : STD_LOGIC;
    signal axis_src_V_data_V_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal axis_src_V_data_V_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal axis_src_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_src_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_src_V_data_V_0_sel : STD_LOGIC;
    signal axis_src_V_data_V_0_load_A : STD_LOGIC;
    signal axis_src_V_data_V_0_load_B : STD_LOGIC;
    signal axis_src_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_src_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal axis_src_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_src_V_user_V_0_vld_in : STD_LOGIC;
    signal axis_src_V_user_V_0_vld_out : STD_LOGIC;
    signal axis_src_V_user_V_0_ack_in : STD_LOGIC;
    signal axis_src_V_user_V_0_ack_out : STD_LOGIC;
    signal axis_src_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_src_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_src_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_src_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_src_V_user_V_0_sel : STD_LOGIC;
    signal axis_src_V_user_V_0_load_A : STD_LOGIC;
    signal axis_src_V_user_V_0_load_B : STD_LOGIC;
    signal axis_src_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_src_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal axis_src_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_src_V_last_V_0_vld_in : STD_LOGIC;
    signal axis_src_V_last_V_0_vld_out : STD_LOGIC;
    signal axis_src_V_last_V_0_ack_in : STD_LOGIC;
    signal axis_src_V_last_V_0_ack_out : STD_LOGIC;
    signal axis_src_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_src_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_src_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_src_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_src_V_last_V_0_sel : STD_LOGIC;
    signal axis_src_V_last_V_0_load_A : STD_LOGIC;
    signal axis_src_V_last_V_0_load_B : STD_LOGIC;
    signal axis_src_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_src_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal axis_src_V_dest_V_0_vld_in : STD_LOGIC;
    signal axis_src_V_dest_V_0_ack_out : STD_LOGIC;
    signal axis_src_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_s_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal eol_2_reg_236 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo1_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_reg_pp1_iter2_tmp_s_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal eol_reg_166 : STD_LOGIC_VECTOR (0 downto 0);
    signal xi_reg_178 : STD_LOGIC_VECTOR (10 downto 0);
    signal eol_1_reg_189 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_reader_data_V_1_reg_200 : STD_LOGIC_VECTOR (23 downto 0);
    signal axis_reader_last_V_2_reg_211 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_reader_data_V_2_reg_224 : STD_LOGIC_VECTOR (23 downto 0);
    signal axis_reader_last_V_3_reg_247 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_reader_data_V_3_reg_259 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_data_V_reg_413 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_last_V_reg_421 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal yi_1_fu_296_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal yi_1_reg_437 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op50_read_state6 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_reg_pp1_iter1_tmp_s_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal xi_1_fu_308_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal brmerge_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_389_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_s_reg_455 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_1_cast_reg_460 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_465 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp2_fu_381_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp2_reg_470 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state10_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp1_exit_iter1_state6 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_eol_2_phi_fu_239_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_reader_last_V1_reg_135 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal axis_reader_data_V1_reg_145 : STD_LOGIC_VECTOR (23 downto 0);
    signal yi_reg_155 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_axis_reader_last_V_2_phi_fu_216_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_eol_phi_fu_170_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_eol_1_phi_fu_192_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_axis_reader_data_V_1_phi_fu_203_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp1_iter1_axis_reader_last_V_2_reg_211 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp1_iter1_axis_reader_data_V_2_reg_224 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal sof_1_fu_106 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_328_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_405_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_395_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_21_fu_365_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_372_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_389_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_s_fu_389_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_395_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_395_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_395_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_405_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_405_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_fu_281_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal grp_fu_395_p10 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_395_p20 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_405_p10 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_s_fu_389_p10 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_condition_640 : BOOLEAN;
    signal ap_condition_637 : BOOLEAN;

    component canny_edge_detectbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component canny_edge_detectcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component canny_edge_detectdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;



begin
    canny_edge_detectbkb_U1 : component canny_edge_detectbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 8,
        dout_WIDTH => 23)
    port map (
        din0 => p_s_fu_389_p0,
        din1 => p_s_fu_389_p1,
        dout => p_s_fu_389_p2);

    canny_edge_detectcud_U2 : component canny_edge_detectcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 8,
        din2_WIDTH => 23,
        dout_WIDTH => 25)
    port map (
        din0 => grp_fu_395_p0,
        din1 => grp_fu_395_p1,
        din2 => grp_fu_395_p2,
        dout => grp_fu_395_p3);

    canny_edge_detectdEe_U3 : component canny_edge_detectdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        din0 => grp_fu_405_p0,
        din1 => grp_fu_405_p1,
        din2 => p_s_reg_455,
        dout => grp_fu_405_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond_fu_290_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((tmp_s_fu_302_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((exitcond_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter1_state6)) then 
                        ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif (((exitcond_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_phi_mux_eol_2_phi_fu_239_p4 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_src_V_data_V_0_ack_out = ap_const_logic_1) and (axis_src_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_src_V_data_V_0_sel_rd <= not(axis_src_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_src_V_data_V_0_ack_in = ap_const_logic_1) and (axis_src_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_src_V_data_V_0_sel_wr <= not(axis_src_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_src_V_data_V_0_state = ap_const_lv2_2) and (axis_src_V_data_V_0_vld_in = ap_const_logic_0)) or ((axis_src_V_data_V_0_state = ap_const_lv2_3) and (axis_src_V_data_V_0_vld_in = ap_const_logic_0) and (axis_src_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    axis_src_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_src_V_data_V_0_state = ap_const_lv2_1) and (axis_src_V_data_V_0_ack_out = ap_const_logic_0)) or ((axis_src_V_data_V_0_state = ap_const_lv2_3) and (axis_src_V_data_V_0_ack_out = ap_const_logic_0) and (axis_src_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_src_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_src_V_data_V_0_vld_in = ap_const_logic_0) and (axis_src_V_data_V_0_ack_out = ap_const_logic_1))) and not(((axis_src_V_data_V_0_ack_out = ap_const_logic_0) and (axis_src_V_data_V_0_vld_in = ap_const_logic_1))) and (axis_src_V_data_V_0_state = ap_const_lv2_3)) or ((axis_src_V_data_V_0_state = ap_const_lv2_1) and (axis_src_V_data_V_0_ack_out = ap_const_logic_1)) or ((axis_src_V_data_V_0_state = ap_const_lv2_2) and (axis_src_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_src_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    axis_src_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_src_V_dest_V_0_state = ap_const_lv2_2) and (axis_src_V_dest_V_0_vld_in = ap_const_logic_0)) or ((axis_src_V_dest_V_0_state = ap_const_lv2_3) and (axis_src_V_dest_V_0_vld_in = ap_const_logic_0) and (axis_src_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    axis_src_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_src_V_dest_V_0_state = ap_const_lv2_1) and (axis_src_V_dest_V_0_ack_out = ap_const_logic_0)) or ((axis_src_V_dest_V_0_state = ap_const_lv2_3) and (axis_src_V_dest_V_0_ack_out = ap_const_logic_0) and (axis_src_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_src_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_src_V_dest_V_0_vld_in = ap_const_logic_0) and (axis_src_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((axis_src_V_dest_V_0_ack_out = ap_const_logic_0) and (axis_src_V_dest_V_0_vld_in = ap_const_logic_1))) and (axis_src_V_dest_V_0_state = ap_const_lv2_3)) or ((axis_src_V_dest_V_0_state = ap_const_lv2_1) and (axis_src_V_dest_V_0_ack_out = ap_const_logic_1)) or ((axis_src_V_dest_V_0_state = ap_const_lv2_2) and (axis_src_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_src_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    axis_src_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_src_V_last_V_0_ack_out = ap_const_logic_1) and (axis_src_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_src_V_last_V_0_sel_rd <= not(axis_src_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_src_V_last_V_0_ack_in = ap_const_logic_1) and (axis_src_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_src_V_last_V_0_sel_wr <= not(axis_src_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_src_V_last_V_0_state = ap_const_lv2_2) and (axis_src_V_last_V_0_vld_in = ap_const_logic_0)) or ((axis_src_V_last_V_0_state = ap_const_lv2_3) and (axis_src_V_last_V_0_vld_in = ap_const_logic_0) and (axis_src_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    axis_src_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_src_V_last_V_0_state = ap_const_lv2_1) and (axis_src_V_last_V_0_ack_out = ap_const_logic_0)) or ((axis_src_V_last_V_0_state = ap_const_lv2_3) and (axis_src_V_last_V_0_ack_out = ap_const_logic_0) and (axis_src_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_src_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_src_V_last_V_0_vld_in = ap_const_logic_0) and (axis_src_V_last_V_0_ack_out = ap_const_logic_1))) and not(((axis_src_V_last_V_0_ack_out = ap_const_logic_0) and (axis_src_V_last_V_0_vld_in = ap_const_logic_1))) and (axis_src_V_last_V_0_state = ap_const_lv2_3)) or ((axis_src_V_last_V_0_state = ap_const_lv2_1) and (axis_src_V_last_V_0_ack_out = ap_const_logic_1)) or ((axis_src_V_last_V_0_state = ap_const_lv2_2) and (axis_src_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_src_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    axis_src_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_src_V_user_V_0_ack_out = ap_const_logic_1) and (axis_src_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_src_V_user_V_0_sel_rd <= not(axis_src_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_src_V_user_V_0_ack_in = ap_const_logic_1) and (axis_src_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_src_V_user_V_0_sel_wr <= not(axis_src_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_src_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_src_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_src_V_user_V_0_state = ap_const_lv2_2) and (axis_src_V_user_V_0_vld_in = ap_const_logic_0)) or ((axis_src_V_user_V_0_state = ap_const_lv2_3) and (axis_src_V_user_V_0_vld_in = ap_const_logic_0) and (axis_src_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    axis_src_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_src_V_user_V_0_state = ap_const_lv2_1) and (axis_src_V_user_V_0_ack_out = ap_const_logic_0)) or ((axis_src_V_user_V_0_state = ap_const_lv2_3) and (axis_src_V_user_V_0_ack_out = ap_const_logic_0) and (axis_src_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_src_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_src_V_user_V_0_vld_in = ap_const_logic_0) and (axis_src_V_user_V_0_ack_out = ap_const_logic_1))) and not(((axis_src_V_user_V_0_ack_out = ap_const_logic_0) and (axis_src_V_user_V_0_vld_in = ap_const_logic_1))) and (axis_src_V_user_V_0_state = ap_const_lv2_3)) or ((axis_src_V_user_V_0_state = ap_const_lv2_1) and (axis_src_V_user_V_0_ack_out = ap_const_logic_1)) or ((axis_src_V_user_V_0_state = ap_const_lv2_2) and (axis_src_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_src_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    axis_src_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    axis_reader_data_V1_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                axis_reader_data_V1_reg_145 <= axis_reader_data_V_3_reg_259;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axis_reader_data_V1_reg_145 <= tmp_data_V_reg_413;
            end if; 
        end if;
    end process;

    axis_reader_data_V_1_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                axis_reader_data_V_1_reg_200 <= axis_reader_data_V1_reg_145;
            elsif (((ap_reg_pp1_iter1_tmp_s_reg_442 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
                axis_reader_data_V_1_reg_200 <= axis_reader_data_V_2_reg_224;
            end if; 
        end if;
    end process;

    axis_reader_data_V_2_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_637)) then
                if (((brmerge_reg_451 = ap_const_lv1_1) and (tmp_s_reg_442 = ap_const_lv1_0))) then 
                    axis_reader_data_V_2_reg_224 <= ap_phi_mux_axis_reader_data_V_1_phi_fu_203_p4;
                elsif (((brmerge_reg_451 = ap_const_lv1_0) and (tmp_s_reg_442 = ap_const_lv1_0))) then 
                    axis_reader_data_V_2_reg_224 <= axis_src_V_data_V_0_data_out;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    axis_reader_data_V_2_reg_224 <= ap_phi_reg_pp1_iter1_axis_reader_data_V_2_reg_224;
                end if;
            end if; 
        end if;
    end process;

    axis_reader_data_V_3_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                axis_reader_data_V_3_reg_259 <= axis_reader_data_V_1_reg_200;
            elsif (((eol_2_reg_236 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                axis_reader_data_V_3_reg_259 <= axis_src_V_data_V_0_data_out;
            end if; 
        end if;
    end process;

    axis_reader_last_V1_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                axis_reader_last_V1_reg_135 <= axis_reader_last_V_3_reg_247;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axis_reader_last_V1_reg_135 <= tmp_last_V_reg_421;
            end if; 
        end if;
    end process;

    axis_reader_last_V_2_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_637)) then
                if (((brmerge_reg_451 = ap_const_lv1_1) and (tmp_s_reg_442 = ap_const_lv1_0))) then 
                    axis_reader_last_V_2_reg_211 <= ap_phi_mux_eol_1_phi_fu_192_p4;
                elsif (((brmerge_reg_451 = ap_const_lv1_0) and (tmp_s_reg_442 = ap_const_lv1_0))) then 
                    axis_reader_last_V_2_reg_211 <= axis_src_V_last_V_0_data_out;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    axis_reader_last_V_2_reg_211 <= ap_phi_reg_pp1_iter1_axis_reader_last_V_2_reg_211;
                end if;
            end if; 
        end if;
    end process;

    axis_reader_last_V_3_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                axis_reader_last_V_3_reg_247 <= eol_1_reg_189;
            elsif (((eol_2_reg_236 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                axis_reader_last_V_3_reg_247 <= axis_src_V_last_V_0_data_out;
            end if; 
        end if;
    end process;

    eol_1_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                eol_1_reg_189 <= axis_reader_last_V1_reg_135;
            elsif (((ap_reg_pp1_iter1_tmp_s_reg_442 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
                eol_1_reg_189 <= axis_reader_last_V_2_reg_211;
            end if; 
        end if;
    end process;

    eol_2_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                eol_2_reg_236 <= eol_reg_166;
            elsif (((eol_2_reg_236 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                eol_2_reg_236 <= axis_src_V_last_V_0_data_out;
            end if; 
        end if;
    end process;

    eol_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                eol_reg_166 <= ap_const_lv1_0;
            elsif (((tmp_s_reg_442 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                eol_reg_166 <= ap_phi_mux_axis_reader_last_V_2_phi_fu_216_p4;
            end if; 
        end if;
    end process;

    sof_1_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_302_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                sof_1_fu_106 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sof_1_fu_106 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    xi_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                xi_reg_178 <= ap_const_lv11_0;
            elsif (((tmp_s_fu_302_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                xi_reg_178 <= xi_1_fu_308_p2;
            end if; 
        end if;
    end process;

    yi_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                yi_reg_155 <= yi_1_reg_437;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                yi_reg_155 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                ap_reg_pp1_iter1_tmp_s_reg_442 <= tmp_s_reg_442;
                tmp_s_reg_442 <= tmp_s_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                ap_reg_pp1_iter2_tmp_s_reg_442 <= ap_reg_pp1_iter1_tmp_s_reg_442;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_src_V_data_V_0_load_A = ap_const_logic_1)) then
                axis_src_V_data_V_0_payload_A <= axis_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_src_V_data_V_0_load_B = ap_const_logic_1)) then
                axis_src_V_data_V_0_payload_B <= axis_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_src_V_last_V_0_load_A = ap_const_logic_1)) then
                axis_src_V_last_V_0_payload_A <= axis_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_src_V_last_V_0_load_B = ap_const_logic_1)) then
                axis_src_V_last_V_0_payload_B <= axis_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_src_V_user_V_0_load_A = ap_const_logic_1)) then
                axis_src_V_user_V_0_payload_A <= axis_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_src_V_user_V_0_load_B = ap_const_logic_1)) then
                axis_src_V_user_V_0_payload_B <= axis_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_302_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                brmerge_reg_451 <= brmerge_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_reg_442 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                p_1_cast_reg_460 <= ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4(15 downto 8);
                p_s_reg_455 <= p_s_fu_389_p2;
                tmp_3_reg_465 <= ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp1_iter1_tmp_s_reg_442 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                phitmp2_reg_470 <= phitmp2_fu_381_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((axis_src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_V_reg_413 <= axis_src_V_data_V_0_data_out;
                tmp_last_V_reg_421 <= axis_src_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                yi_1_reg_437 <= yi_1_fu_296_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, axis_src_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp1_iter3, exitcond_fu_290_p2, ap_CS_fsm_state4, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_subdone, tmp_user_V_fu_281_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_user_V_fu_281_p1 = ap_const_lv1_0) and (axis_src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((tmp_user_V_fu_281_p1 = ap_const_lv1_1) and (axis_src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((exitcond_fu_290_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(axis_src_V_data_V_0_vld_out, fifo1_full_n, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_reg_pp1_iter2_tmp_s_reg_442, ap_predicate_op50_read_state6)
    begin
                ap_block_pp1_stage0_01001 <= (((ap_reg_pp1_iter2_tmp_s_reg_442 = ap_const_lv1_0) and (fifo1_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((axis_src_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_predicate_op50_read_state6 = ap_const_boolean_1)));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(axis_src_V_data_V_0_vld_out, fifo1_full_n, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_reg_pp1_iter2_tmp_s_reg_442, ap_predicate_op50_read_state6)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_reg_pp1_iter2_tmp_s_reg_442 = ap_const_lv1_0) and (fifo1_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((axis_src_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_predicate_op50_read_state6 = ap_const_boolean_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(axis_src_V_data_V_0_vld_out, fifo1_full_n, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_reg_pp1_iter2_tmp_s_reg_442, ap_predicate_op50_read_state6)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_reg_pp1_iter2_tmp_s_reg_442 = ap_const_lv1_0) and (fifo1_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((axis_src_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_predicate_op50_read_state6 = ap_const_boolean_1)));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(axis_src_V_data_V_0_vld_out, ap_enable_reg_pp2_iter1, eol_2_reg_236)
    begin
                ap_block_pp2_stage0_11001 <= ((eol_2_reg_236 = ap_const_lv1_0) and (axis_src_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(axis_src_V_data_V_0_vld_out, ap_enable_reg_pp2_iter1, eol_2_reg_236)
    begin
                ap_block_pp2_stage0_subdone <= ((eol_2_reg_236 = ap_const_lv1_0) and (axis_src_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp2_stage0_iter1_assign_proc : process(axis_src_V_data_V_0_vld_out, eol_2_reg_236)
    begin
                ap_block_state11_pp2_stage0_iter1 <= ((eol_2_reg_236 = ap_const_lv1_0) and (axis_src_V_data_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp1_stage0_iter1_assign_proc : process(axis_src_V_data_V_0_vld_out, ap_predicate_op50_read_state6)
    begin
                ap_block_state6_pp1_stage0_iter1 <= ((axis_src_V_data_V_0_vld_out = ap_const_logic_0) and (ap_predicate_op50_read_state6 = ap_const_boolean_1));
    end process;

        ap_block_state7_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp1_stage0_iter3_assign_proc : process(fifo1_full_n, ap_reg_pp1_iter2_tmp_s_reg_442)
    begin
                ap_block_state8_pp1_stage0_iter3 <= ((ap_reg_pp1_iter2_tmp_s_reg_442 = ap_const_lv1_0) and (fifo1_full_n = ap_const_logic_0));
    end process;


    ap_condition_637_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001)
    begin
                ap_condition_637 <= ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0));
    end process;


    ap_condition_640_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_s_reg_442)
    begin
                ap_condition_640 <= ((tmp_s_reg_442 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0));
    end process;


    ap_condition_pp1_exit_iter1_state6_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_condition_pp1_exit_iter1_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter1_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond_fu_290_p2, ap_CS_fsm_state4)
    begin
        if (((exitcond_fu_290_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_axis_reader_data_V_1_phi_fu_203_p4_assign_proc : process(ap_block_pp1_stage0, axis_reader_data_V_1_reg_200, axis_reader_data_V_2_reg_224, ap_reg_pp1_iter1_tmp_s_reg_442, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_reg_pp1_iter1_tmp_s_reg_442 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_axis_reader_data_V_1_phi_fu_203_p4 <= axis_reader_data_V_2_reg_224;
        else 
            ap_phi_mux_axis_reader_data_V_1_phi_fu_203_p4 <= axis_reader_data_V_1_reg_200;
        end if; 
    end process;


    ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4_assign_proc : process(axis_src_V_data_V_0_data_out, brmerge_reg_451, ap_phi_mux_axis_reader_data_V_1_phi_fu_203_p4, ap_phi_reg_pp1_iter1_axis_reader_data_V_2_reg_224, ap_condition_640)
    begin
        if ((ap_const_boolean_1 = ap_condition_640)) then
            if ((brmerge_reg_451 = ap_const_lv1_1)) then 
                ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4 <= ap_phi_mux_axis_reader_data_V_1_phi_fu_203_p4;
            elsif ((brmerge_reg_451 = ap_const_lv1_0)) then 
                ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4 <= axis_src_V_data_V_0_data_out;
            else 
                ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4 <= ap_phi_reg_pp1_iter1_axis_reader_data_V_2_reg_224;
            end if;
        else 
            ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4 <= ap_phi_reg_pp1_iter1_axis_reader_data_V_2_reg_224;
        end if; 
    end process;


    ap_phi_mux_axis_reader_last_V_2_phi_fu_216_p4_assign_proc : process(axis_src_V_last_V_0_data_out, brmerge_reg_451, ap_phi_mux_eol_1_phi_fu_192_p4, ap_phi_reg_pp1_iter1_axis_reader_last_V_2_reg_211, ap_condition_640)
    begin
        if ((ap_const_boolean_1 = ap_condition_640)) then
            if ((brmerge_reg_451 = ap_const_lv1_1)) then 
                ap_phi_mux_axis_reader_last_V_2_phi_fu_216_p4 <= ap_phi_mux_eol_1_phi_fu_192_p4;
            elsif ((brmerge_reg_451 = ap_const_lv1_0)) then 
                ap_phi_mux_axis_reader_last_V_2_phi_fu_216_p4 <= axis_src_V_last_V_0_data_out;
            else 
                ap_phi_mux_axis_reader_last_V_2_phi_fu_216_p4 <= ap_phi_reg_pp1_iter1_axis_reader_last_V_2_reg_211;
            end if;
        else 
            ap_phi_mux_axis_reader_last_V_2_phi_fu_216_p4 <= ap_phi_reg_pp1_iter1_axis_reader_last_V_2_reg_211;
        end if; 
    end process;


    ap_phi_mux_eol_1_phi_fu_192_p4_assign_proc : process(ap_block_pp1_stage0, eol_1_reg_189, axis_reader_last_V_2_reg_211, ap_reg_pp1_iter1_tmp_s_reg_442, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_reg_pp1_iter1_tmp_s_reg_442 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_eol_1_phi_fu_192_p4 <= axis_reader_last_V_2_reg_211;
        else 
            ap_phi_mux_eol_1_phi_fu_192_p4 <= eol_1_reg_189;
        end if; 
    end process;


    ap_phi_mux_eol_2_phi_fu_239_p4_assign_proc : process(axis_src_V_last_V_0_data_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, eol_2_reg_236)
    begin
        if (((eol_2_reg_236 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_eol_2_phi_fu_239_p4 <= axis_src_V_last_V_0_data_out;
        else 
            ap_phi_mux_eol_2_phi_fu_239_p4 <= eol_2_reg_236;
        end if; 
    end process;


    ap_phi_mux_eol_phi_fu_170_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_s_reg_442, eol_reg_166, ap_phi_mux_axis_reader_last_V_2_phi_fu_216_p4)
    begin
        if (((tmp_s_reg_442 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_eol_phi_fu_170_p4 <= ap_phi_mux_axis_reader_last_V_2_phi_fu_216_p4;
        else 
            ap_phi_mux_eol_phi_fu_170_p4 <= eol_reg_166;
        end if; 
    end process;

    ap_phi_reg_pp1_iter1_axis_reader_data_V_2_reg_224 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp1_iter1_axis_reader_last_V_2_reg_211 <= "X";

    ap_predicate_op50_read_state6_assign_proc : process(tmp_s_reg_442, brmerge_reg_451)
    begin
                ap_predicate_op50_read_state6 <= ((brmerge_reg_451 = ap_const_lv1_0) and (tmp_s_reg_442 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;

    axis_in_TDATA_blk_n_assign_proc : process(axis_src_V_data_V_0_state, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_s_reg_442, brmerge_reg_451, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, eol_2_reg_236)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((eol_2_reg_236 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((brmerge_reg_451 = ap_const_lv1_0) and (tmp_s_reg_442 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            axis_in_TDATA_blk_n <= axis_src_V_data_V_0_state(0);
        else 
            axis_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_in_TREADY <= axis_src_V_dest_V_0_state(1);
    axis_src_V_data_V_0_ack_in <= axis_src_V_data_V_0_state(1);

    axis_src_V_data_V_0_ack_out_assign_proc : process(axis_src_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_reg_236, ap_predicate_op50_read_state6, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((eol_2_reg_236 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_predicate_op50_read_state6 = ap_const_boolean_1)) or ((axis_src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            axis_src_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_src_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_src_V_data_V_0_data_out_assign_proc : process(axis_src_V_data_V_0_payload_A, axis_src_V_data_V_0_payload_B, axis_src_V_data_V_0_sel)
    begin
        if ((axis_src_V_data_V_0_sel = ap_const_logic_1)) then 
            axis_src_V_data_V_0_data_out <= axis_src_V_data_V_0_payload_B;
        else 
            axis_src_V_data_V_0_data_out <= axis_src_V_data_V_0_payload_A;
        end if; 
    end process;

    axis_src_V_data_V_0_load_A <= (not(axis_src_V_data_V_0_sel_wr) and axis_src_V_data_V_0_state_cmp_full);
    axis_src_V_data_V_0_load_B <= (axis_src_V_data_V_0_state_cmp_full and axis_src_V_data_V_0_sel_wr);
    axis_src_V_data_V_0_sel <= axis_src_V_data_V_0_sel_rd;
    axis_src_V_data_V_0_state_cmp_full <= '0' when (axis_src_V_data_V_0_state = ap_const_lv2_1) else '1';
    axis_src_V_data_V_0_vld_in <= axis_in_TVALID;
    axis_src_V_data_V_0_vld_out <= axis_src_V_data_V_0_state(0);

    axis_src_V_dest_V_0_ack_out_assign_proc : process(axis_src_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_reg_236, ap_predicate_op50_read_state6, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((eol_2_reg_236 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_predicate_op50_read_state6 = ap_const_boolean_1)) or ((axis_src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            axis_src_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_src_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    axis_src_V_dest_V_0_vld_in <= axis_in_TVALID;
    axis_src_V_last_V_0_ack_in <= axis_src_V_last_V_0_state(1);

    axis_src_V_last_V_0_ack_out_assign_proc : process(axis_src_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_reg_236, ap_predicate_op50_read_state6, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((eol_2_reg_236 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_predicate_op50_read_state6 = ap_const_boolean_1)) or ((axis_src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            axis_src_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_src_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_src_V_last_V_0_data_out_assign_proc : process(axis_src_V_last_V_0_payload_A, axis_src_V_last_V_0_payload_B, axis_src_V_last_V_0_sel)
    begin
        if ((axis_src_V_last_V_0_sel = ap_const_logic_1)) then 
            axis_src_V_last_V_0_data_out <= axis_src_V_last_V_0_payload_B;
        else 
            axis_src_V_last_V_0_data_out <= axis_src_V_last_V_0_payload_A;
        end if; 
    end process;

    axis_src_V_last_V_0_load_A <= (not(axis_src_V_last_V_0_sel_wr) and axis_src_V_last_V_0_state_cmp_full);
    axis_src_V_last_V_0_load_B <= (axis_src_V_last_V_0_state_cmp_full and axis_src_V_last_V_0_sel_wr);
    axis_src_V_last_V_0_sel <= axis_src_V_last_V_0_sel_rd;
    axis_src_V_last_V_0_state_cmp_full <= '0' when (axis_src_V_last_V_0_state = ap_const_lv2_1) else '1';
    axis_src_V_last_V_0_vld_in <= axis_in_TVALID;
    axis_src_V_last_V_0_vld_out <= axis_src_V_last_V_0_state(0);
    axis_src_V_user_V_0_ack_in <= axis_src_V_user_V_0_state(1);

    axis_src_V_user_V_0_ack_out_assign_proc : process(axis_src_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_reg_236, ap_predicate_op50_read_state6, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((eol_2_reg_236 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_predicate_op50_read_state6 = ap_const_boolean_1)) or ((axis_src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            axis_src_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_src_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_src_V_user_V_0_data_out_assign_proc : process(axis_src_V_user_V_0_payload_A, axis_src_V_user_V_0_payload_B, axis_src_V_user_V_0_sel)
    begin
        if ((axis_src_V_user_V_0_sel = ap_const_logic_1)) then 
            axis_src_V_user_V_0_data_out <= axis_src_V_user_V_0_payload_B;
        else 
            axis_src_V_user_V_0_data_out <= axis_src_V_user_V_0_payload_A;
        end if; 
    end process;

    axis_src_V_user_V_0_load_A <= (not(axis_src_V_user_V_0_sel_wr) and axis_src_V_user_V_0_state_cmp_full);
    axis_src_V_user_V_0_load_B <= (axis_src_V_user_V_0_state_cmp_full and axis_src_V_user_V_0_sel_wr);
    axis_src_V_user_V_0_sel <= axis_src_V_user_V_0_sel_rd;
    axis_src_V_user_V_0_state_cmp_full <= '0' when (axis_src_V_user_V_0_state = ap_const_lv2_1) else '1';
    axis_src_V_user_V_0_vld_in <= axis_in_TVALID;
    axis_src_V_user_V_0_vld_out <= axis_src_V_user_V_0_state(0);
    brmerge_fu_317_p2 <= (sof_1_fu_106 or ap_phi_mux_eol_phi_fu_170_p4);
    exitcond_fu_290_p2 <= "1" when (yi_reg_155 = ap_const_lv10_2D0) else "0";

    fifo1_blk_n_assign_proc : process(fifo1_full_n, ap_block_pp1_stage0, ap_enable_reg_pp1_iter3, ap_reg_pp1_iter2_tmp_s_reg_442)
    begin
        if (((ap_reg_pp1_iter2_tmp_s_reg_442 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            fifo1_blk_n <= fifo1_full_n;
        else 
            fifo1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo1_din <= phitmp2_reg_470;

    fifo1_write_assign_proc : process(ap_enable_reg_pp1_iter3, ap_reg_pp1_iter2_tmp_s_reg_442, ap_block_pp1_stage0_11001)
    begin
        if (((ap_reg_pp1_iter2_tmp_s_reg_442 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            fifo1_write <= ap_const_logic_1;
        else 
            fifo1_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_395_p0 <= ap_const_lv25_9645(17 - 1 downto 0);
    grp_fu_395_p1 <= grp_fu_395_p10(8 - 1 downto 0);
    grp_fu_395_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_cast_reg_460),25));
    grp_fu_395_p2 <= grp_fu_395_p20(23 - 1 downto 0);
    grp_fu_395_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_405_p3),25));
    grp_fu_405_p0 <= ap_const_lv23_4C8B(16 - 1 downto 0);
    grp_fu_405_p1 <= grp_fu_405_p10(8 - 1 downto 0);
    grp_fu_405_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_465),23));

    internal_ap_ready_assign_proc : process(exitcond_fu_290_p2, ap_CS_fsm_state4)
    begin
        if (((exitcond_fu_290_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    p_s_fu_389_p0 <= ap_const_lv23_24DD(15 - 1 downto 0);
    p_s_fu_389_p1 <= p_s_fu_389_p10(8 - 1 downto 0);
    p_s_fu_389_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_328_p1),23));
    phitmp2_fu_381_p3 <= 
        ap_const_lv8_FF when (tmp_21_fu_365_p3(0) = '1') else 
        tmp_8_fu_372_p4;
    r_V_fu_328_p1 <= ap_phi_mux_axis_reader_data_V_2_phi_fu_228_p4(8 - 1 downto 0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_21_fu_365_p3 <= grp_fu_395_p3(24 downto 24);
    tmp_8_fu_372_p4 <= grp_fu_395_p3(23 downto 16);
    tmp_s_fu_302_p2 <= "1" when (xi_reg_178 = ap_const_lv11_500) else "0";
    tmp_user_V_fu_281_p1 <= axis_src_V_user_V_0_data_out;
    xi_1_fu_308_p2 <= std_logic_vector(unsigned(xi_reg_178) + unsigned(ap_const_lv11_1));
    yi_1_fu_296_p2 <= std_logic_vector(unsigned(yi_reg_155) + unsigned(ap_const_lv10_1));
end behav;
