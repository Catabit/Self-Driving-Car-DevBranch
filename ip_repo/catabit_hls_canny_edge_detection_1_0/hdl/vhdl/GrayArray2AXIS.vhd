-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GrayArray2AXIS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    axis_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    axis_out_TVALID : OUT STD_LOGIC;
    axis_out_TREADY : IN STD_LOGIC;
    axis_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    axis_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    axis_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    axis_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    axis_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    axis_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    fifo7_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    fifo7_empty_n : IN STD_LOGIC;
    fifo7_read : OUT STD_LOGIC );
end;


architecture behav of GrayArray2AXIS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_4FF : STD_LOGIC_VECTOR (10 downto 0) := "10011111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal axis_dst_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal axis_dst_V_data_V_1_vld_in : STD_LOGIC;
    signal axis_dst_V_data_V_1_vld_out : STD_LOGIC;
    signal axis_dst_V_data_V_1_ack_in : STD_LOGIC;
    signal axis_dst_V_data_V_1_ack_out : STD_LOGIC;
    signal axis_dst_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal axis_dst_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal axis_dst_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dst_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dst_V_data_V_1_sel : STD_LOGIC;
    signal axis_dst_V_data_V_1_load_A : STD_LOGIC;
    signal axis_dst_V_data_V_1_load_B : STD_LOGIC;
    signal axis_dst_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dst_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal axis_dst_V_keep_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dst_V_keep_V_1_vld_in : STD_LOGIC;
    signal axis_dst_V_keep_V_1_vld_out : STD_LOGIC;
    signal axis_dst_V_keep_V_1_ack_in : STD_LOGIC;
    signal axis_dst_V_keep_V_1_ack_out : STD_LOGIC;
    signal axis_dst_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dst_V_keep_V_1_sel : STD_LOGIC;
    signal axis_dst_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dst_V_strb_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dst_V_strb_V_1_vld_in : STD_LOGIC;
    signal axis_dst_V_strb_V_1_vld_out : STD_LOGIC;
    signal axis_dst_V_strb_V_1_ack_in : STD_LOGIC;
    signal axis_dst_V_strb_V_1_ack_out : STD_LOGIC;
    signal axis_dst_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dst_V_strb_V_1_sel : STD_LOGIC;
    signal axis_dst_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dst_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dst_V_user_V_1_vld_in : STD_LOGIC;
    signal axis_dst_V_user_V_1_vld_out : STD_LOGIC;
    signal axis_dst_V_user_V_1_ack_in : STD_LOGIC;
    signal axis_dst_V_user_V_1_ack_out : STD_LOGIC;
    signal axis_dst_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dst_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dst_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dst_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dst_V_user_V_1_sel : STD_LOGIC;
    signal axis_dst_V_user_V_1_load_A : STD_LOGIC;
    signal axis_dst_V_user_V_1_load_B : STD_LOGIC;
    signal axis_dst_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dst_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal axis_dst_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dst_V_last_V_1_vld_in : STD_LOGIC;
    signal axis_dst_V_last_V_1_vld_out : STD_LOGIC;
    signal axis_dst_V_last_V_1_ack_in : STD_LOGIC;
    signal axis_dst_V_last_V_1_ack_out : STD_LOGIC;
    signal axis_dst_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dst_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dst_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dst_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dst_V_last_V_1_sel : STD_LOGIC;
    signal axis_dst_V_last_V_1_load_A : STD_LOGIC;
    signal axis_dst_V_last_V_1_load_B : STD_LOGIC;
    signal axis_dst_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dst_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal axis_dst_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dst_V_id_V_1_vld_in : STD_LOGIC;
    signal axis_dst_V_id_V_1_vld_out : STD_LOGIC;
    signal axis_dst_V_id_V_1_ack_in : STD_LOGIC;
    signal axis_dst_V_id_V_1_ack_out : STD_LOGIC;
    signal axis_dst_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dst_V_id_V_1_sel : STD_LOGIC;
    signal axis_dst_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dst_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dst_V_dest_V_1_vld_in : STD_LOGIC;
    signal axis_dst_V_dest_V_1_vld_out : STD_LOGIC;
    signal axis_dst_V_dest_V_1_ack_in : STD_LOGIC;
    signal axis_dst_V_dest_V_1_ack_out : STD_LOGIC;
    signal axis_dst_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dst_V_dest_V_1_sel : STD_LOGIC;
    signal axis_dst_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_59_i_reg_216 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter1_tmp_59_i_reg_216 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo7_blk_n : STD_LOGIC;
    signal xi_i_reg_134 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2 : BOOLEAN;
    signal yi_fu_151_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal yi_reg_211 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_59_i_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal xi_fu_163_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_user_V_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_225 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_230 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal yi_i_reg_122 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_169_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_179_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_173_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_62_i_fu_187_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((axis_dst_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_dest_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_data_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_id_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_user_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_strb_V_1_ack_in = ap_const_logic_0))) and (tmp_i_fu_145_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((axis_dst_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_dest_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_data_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_id_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_user_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_strb_V_1_ack_in = ap_const_logic_0))) and (tmp_i_fu_145_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((axis_dst_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_dest_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_data_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_id_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_user_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_strb_V_1_ack_in = ap_const_logic_0))) and (tmp_i_fu_145_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dst_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dst_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dst_V_data_V_1_sel_rd <= not(axis_dst_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dst_V_data_V_1_ack_in = ap_const_logic_1) and (axis_dst_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dst_V_data_V_1_sel_wr <= not(axis_dst_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dst_V_data_V_1_state = ap_const_lv2_2) and (axis_dst_V_data_V_1_vld_in = ap_const_logic_0)) or ((axis_dst_V_data_V_1_state = ap_const_lv2_3) and (axis_dst_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dst_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    axis_dst_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dst_V_data_V_1_state = ap_const_lv2_1) and (axis_dst_V_data_V_1_ack_out = ap_const_logic_0)) or ((axis_dst_V_data_V_1_state = ap_const_lv2_3) and (axis_dst_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dst_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dst_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dst_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dst_V_data_V_1_ack_out = ap_const_logic_1))) and not(((axis_dst_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dst_V_data_V_1_vld_in = ap_const_logic_1))) and (axis_dst_V_data_V_1_state = ap_const_lv2_3)) or ((axis_dst_V_data_V_1_state = ap_const_lv2_1) and (axis_dst_V_data_V_1_ack_out = ap_const_logic_1)) or ((axis_dst_V_data_V_1_state = ap_const_lv2_2) and (axis_dst_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dst_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dst_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dst_V_dest_V_1_ack_out = ap_const_logic_1) and (axis_dst_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dst_V_dest_V_1_sel_rd <= not(axis_dst_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dst_V_dest_V_1_state = ap_const_lv2_2) and (axis_dst_V_dest_V_1_vld_in = ap_const_logic_0)) or ((axis_dst_V_dest_V_1_state = ap_const_lv2_3) and (axis_dst_V_dest_V_1_vld_in = ap_const_logic_0) and (axis_dst_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    axis_dst_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dst_V_dest_V_1_state = ap_const_lv2_1) and (axis_dst_V_dest_V_1_ack_out = ap_const_logic_0)) or ((axis_dst_V_dest_V_1_state = ap_const_lv2_3) and (axis_dst_V_dest_V_1_ack_out = ap_const_logic_0) and (axis_dst_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dst_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dst_V_dest_V_1_vld_in = ap_const_logic_0) and (axis_dst_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((axis_dst_V_dest_V_1_ack_out = ap_const_logic_0) and (axis_dst_V_dest_V_1_vld_in = ap_const_logic_1))) and (axis_dst_V_dest_V_1_state = ap_const_lv2_3)) or ((axis_dst_V_dest_V_1_state = ap_const_lv2_1) and (axis_dst_V_dest_V_1_ack_out = ap_const_logic_1)) or ((axis_dst_V_dest_V_1_state = ap_const_lv2_2) and (axis_dst_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dst_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dst_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dst_V_id_V_1_ack_out = ap_const_logic_1) and (axis_dst_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dst_V_id_V_1_sel_rd <= not(axis_dst_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dst_V_id_V_1_state = ap_const_lv2_2) and (axis_dst_V_id_V_1_vld_in = ap_const_logic_0)) or ((axis_dst_V_id_V_1_state = ap_const_lv2_3) and (axis_dst_V_id_V_1_vld_in = ap_const_logic_0) and (axis_dst_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    axis_dst_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dst_V_id_V_1_state = ap_const_lv2_1) and (axis_dst_V_id_V_1_ack_out = ap_const_logic_0)) or ((axis_dst_V_id_V_1_state = ap_const_lv2_3) and (axis_dst_V_id_V_1_ack_out = ap_const_logic_0) and (axis_dst_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dst_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dst_V_id_V_1_vld_in = ap_const_logic_0) and (axis_dst_V_id_V_1_ack_out = ap_const_logic_1))) and not(((axis_dst_V_id_V_1_ack_out = ap_const_logic_0) and (axis_dst_V_id_V_1_vld_in = ap_const_logic_1))) and (axis_dst_V_id_V_1_state = ap_const_lv2_3)) or ((axis_dst_V_id_V_1_state = ap_const_lv2_1) and (axis_dst_V_id_V_1_ack_out = ap_const_logic_1)) or ((axis_dst_V_id_V_1_state = ap_const_lv2_2) and (axis_dst_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dst_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dst_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dst_V_keep_V_1_vld_out = ap_const_logic_1) and (axis_dst_V_keep_V_1_ack_out = ap_const_logic_1))) then 
                                        axis_dst_V_keep_V_1_sel_rd <= not(axis_dst_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dst_V_keep_V_1_state = ap_const_lv2_2) and (axis_dst_V_keep_V_1_vld_in = ap_const_logic_0)) or ((axis_dst_V_keep_V_1_state = ap_const_lv2_3) and (axis_dst_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dst_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    axis_dst_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dst_V_keep_V_1_state = ap_const_lv2_1) and (axis_dst_V_keep_V_1_ack_out = ap_const_logic_0)) or ((axis_dst_V_keep_V_1_state = ap_const_lv2_3) and (axis_dst_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dst_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dst_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dst_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dst_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((axis_dst_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dst_V_keep_V_1_vld_in = ap_const_logic_1))) and (axis_dst_V_keep_V_1_state = ap_const_lv2_3)) or ((axis_dst_V_keep_V_1_state = ap_const_lv2_1) and (axis_dst_V_keep_V_1_ack_out = ap_const_logic_1)) or ((axis_dst_V_keep_V_1_state = ap_const_lv2_2) and (axis_dst_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dst_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dst_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dst_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dst_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dst_V_last_V_1_sel_rd <= not(axis_dst_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dst_V_last_V_1_ack_in = ap_const_logic_1) and (axis_dst_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dst_V_last_V_1_sel_wr <= not(axis_dst_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dst_V_last_V_1_state = ap_const_lv2_2) and (axis_dst_V_last_V_1_vld_in = ap_const_logic_0)) or ((axis_dst_V_last_V_1_state = ap_const_lv2_3) and (axis_dst_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dst_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    axis_dst_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dst_V_last_V_1_state = ap_const_lv2_1) and (axis_dst_V_last_V_1_ack_out = ap_const_logic_0)) or ((axis_dst_V_last_V_1_state = ap_const_lv2_3) and (axis_dst_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dst_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dst_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dst_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dst_V_last_V_1_ack_out = ap_const_logic_1))) and not(((axis_dst_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dst_V_last_V_1_vld_in = ap_const_logic_1))) and (axis_dst_V_last_V_1_state = ap_const_lv2_3)) or ((axis_dst_V_last_V_1_state = ap_const_lv2_1) and (axis_dst_V_last_V_1_ack_out = ap_const_logic_1)) or ((axis_dst_V_last_V_1_state = ap_const_lv2_2) and (axis_dst_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dst_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dst_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dst_V_strb_V_1_ack_out = ap_const_logic_1) and (axis_dst_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dst_V_strb_V_1_sel_rd <= not(axis_dst_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dst_V_strb_V_1_state = ap_const_lv2_2) and (axis_dst_V_strb_V_1_vld_in = ap_const_logic_0)) or ((axis_dst_V_strb_V_1_state = ap_const_lv2_3) and (axis_dst_V_strb_V_1_vld_in = ap_const_logic_0) and (axis_dst_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    axis_dst_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dst_V_strb_V_1_state = ap_const_lv2_1) and (axis_dst_V_strb_V_1_ack_out = ap_const_logic_0)) or ((axis_dst_V_strb_V_1_state = ap_const_lv2_3) and (axis_dst_V_strb_V_1_ack_out = ap_const_logic_0) and (axis_dst_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dst_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dst_V_strb_V_1_vld_in = ap_const_logic_0) and (axis_dst_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((axis_dst_V_strb_V_1_ack_out = ap_const_logic_0) and (axis_dst_V_strb_V_1_vld_in = ap_const_logic_1))) and (axis_dst_V_strb_V_1_state = ap_const_lv2_3)) or ((axis_dst_V_strb_V_1_state = ap_const_lv2_1) and (axis_dst_V_strb_V_1_ack_out = ap_const_logic_1)) or ((axis_dst_V_strb_V_1_state = ap_const_lv2_2) and (axis_dst_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dst_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dst_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dst_V_user_V_1_ack_out = ap_const_logic_1) and (axis_dst_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dst_V_user_V_1_sel_rd <= not(axis_dst_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dst_V_user_V_1_ack_in = ap_const_logic_1) and (axis_dst_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dst_V_user_V_1_sel_wr <= not(axis_dst_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dst_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_dst_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dst_V_user_V_1_state = ap_const_lv2_2) and (axis_dst_V_user_V_1_vld_in = ap_const_logic_0)) or ((axis_dst_V_user_V_1_state = ap_const_lv2_3) and (axis_dst_V_user_V_1_vld_in = ap_const_logic_0) and (axis_dst_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    axis_dst_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dst_V_user_V_1_state = ap_const_lv2_1) and (axis_dst_V_user_V_1_ack_out = ap_const_logic_0)) or ((axis_dst_V_user_V_1_state = ap_const_lv2_3) and (axis_dst_V_user_V_1_ack_out = ap_const_logic_0) and (axis_dst_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dst_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dst_V_user_V_1_vld_in = ap_const_logic_0) and (axis_dst_V_user_V_1_ack_out = ap_const_logic_1))) and not(((axis_dst_V_user_V_1_ack_out = ap_const_logic_0) and (axis_dst_V_user_V_1_vld_in = ap_const_logic_1))) and (axis_dst_V_user_V_1_state = ap_const_lv2_3)) or ((axis_dst_V_user_V_1_state = ap_const_lv2_1) and (axis_dst_V_user_V_1_ack_out = ap_const_logic_1)) or ((axis_dst_V_user_V_1_state = ap_const_lv2_2) and (axis_dst_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dst_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dst_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    xi_i_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((axis_dst_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_dest_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_data_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_id_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_user_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_strb_V_1_ack_in = ap_const_logic_0))) and (tmp_i_fu_145_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                xi_i_reg_134 <= ap_const_lv11_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_59_i_fu_157_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                xi_i_reg_134 <= xi_fu_163_p2;
            end if; 
        end if;
    end process;

    yi_i_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                yi_i_reg_122 <= yi_reg_211;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                yi_i_reg_122 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_tmp_59_i_reg_216 <= tmp_59_i_reg_216;
                tmp_59_i_reg_216 <= tmp_59_i_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dst_V_data_V_1_load_A = ap_const_logic_1)) then
                axis_dst_V_data_V_1_payload_A <= fifo7_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dst_V_data_V_1_load_B = ap_const_logic_1)) then
                axis_dst_V_data_V_1_payload_B <= fifo7_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dst_V_last_V_1_load_A = ap_const_logic_1)) then
                axis_dst_V_last_V_1_payload_A <= tmp_last_V_reg_230;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dst_V_last_V_1_load_B = ap_const_logic_1)) then
                axis_dst_V_last_V_1_payload_B <= tmp_last_V_reg_230;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dst_V_user_V_1_load_A = ap_const_logic_1)) then
                axis_dst_V_user_V_1_payload_A <= tmp_user_V_reg_225;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dst_V_user_V_1_load_B = ap_const_logic_1)) then
                axis_dst_V_user_V_1_payload_B <= tmp_user_V_reg_225;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_59_i_fu_157_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_last_V_reg_230 <= tmp_last_V_fu_201_p2;
                tmp_user_V_reg_225 <= tmp_user_V_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((axis_dst_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_dest_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_data_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_id_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_user_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_strb_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                yi_reg_211 <= yi_fu_151_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, axis_dst_V_data_V_1_ack_in, axis_dst_V_keep_V_1_ack_in, axis_dst_V_strb_V_1_ack_in, axis_dst_V_user_V_1_ack_in, axis_dst_V_last_V_1_ack_in, axis_dst_V_id_V_1_ack_in, axis_dst_V_dest_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, tmp_i_fu_145_p2, ap_CS_fsm_state2, tmp_59_i_fu_157_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((axis_dst_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_dest_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_data_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_id_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_user_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_strb_V_1_ack_in = ap_const_logic_0))) and (tmp_i_fu_145_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((axis_dst_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_dest_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_data_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_id_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_user_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_strb_V_1_ack_in = ap_const_logic_0))) and (tmp_i_fu_145_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_59_i_fu_157_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_59_i_fu_157_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo7_empty_n, ap_enable_reg_pp0_iter1, tmp_59_i_reg_216)
    begin
                ap_block_pp0_stage0_01001 <= ((tmp_59_i_reg_216 = ap_const_lv1_0) and (fifo7_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo7_empty_n, ap_enable_reg_pp0_iter1, tmp_59_i_reg_216, ap_enable_reg_pp0_iter2, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((tmp_59_i_reg_216 = ap_const_lv1_0) and (fifo7_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo7_empty_n, ap_enable_reg_pp0_iter1, tmp_59_i_reg_216, ap_enable_reg_pp0_iter2, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((tmp_59_i_reg_216 = ap_const_lv1_0) and (fifo7_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(axis_dst_V_data_V_1_ack_in, axis_dst_V_keep_V_1_ack_in, axis_dst_V_strb_V_1_ack_in, axis_dst_V_user_V_1_ack_in, axis_dst_V_last_V_1_ack_in, axis_dst_V_id_V_1_ack_in, axis_dst_V_dest_V_1_ack_in)
    begin
                ap_block_state2 <= ((axis_dst_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_dest_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_data_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_id_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_user_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_strb_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(axis_dst_V_data_V_1_ack_in, tmp_59_i_reg_216)
    begin
                ap_block_state4_io <= ((tmp_59_i_reg_216 = ap_const_lv1_0) and (axis_dst_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(fifo7_empty_n, tmp_59_i_reg_216)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((tmp_59_i_reg_216 = ap_const_lv1_0) and (fifo7_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(axis_dst_V_data_V_1_ack_in, ap_reg_pp0_iter1_tmp_59_i_reg_216)
    begin
                ap_block_state5_io <= ((ap_reg_pp0_iter1_tmp_59_i_reg_216 = ap_const_lv1_0) and (axis_dst_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(tmp_59_i_fu_157_p2)
    begin
        if ((tmp_59_i_fu_157_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, axis_dst_V_data_V_1_ack_in, axis_dst_V_keep_V_1_ack_in, axis_dst_V_strb_V_1_ack_in, axis_dst_V_user_V_1_ack_in, axis_dst_V_last_V_1_ack_in, axis_dst_V_id_V_1_ack_in, axis_dst_V_dest_V_1_ack_in, tmp_i_fu_145_p2, ap_CS_fsm_state2)
    begin
        if ((not(((axis_dst_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_dest_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_data_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_id_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_user_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_strb_V_1_ack_in = ap_const_logic_0))) and (tmp_i_fu_145_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(axis_dst_V_data_V_1_ack_in, axis_dst_V_keep_V_1_ack_in, axis_dst_V_strb_V_1_ack_in, axis_dst_V_user_V_1_ack_in, axis_dst_V_last_V_1_ack_in, axis_dst_V_id_V_1_ack_in, axis_dst_V_dest_V_1_ack_in, tmp_i_fu_145_p2, ap_CS_fsm_state2)
    begin
        if ((not(((axis_dst_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_dest_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_data_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_id_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_user_V_1_ack_in = ap_const_logic_0) or (axis_dst_V_strb_V_1_ack_in = ap_const_logic_0))) and (tmp_i_fu_145_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    axis_dst_V_data_V_1_ack_in <= axis_dst_V_data_V_1_state(1);
    axis_dst_V_data_V_1_ack_out <= axis_out_TREADY;

    axis_dst_V_data_V_1_data_out_assign_proc : process(axis_dst_V_data_V_1_payload_A, axis_dst_V_data_V_1_payload_B, axis_dst_V_data_V_1_sel)
    begin
        if ((axis_dst_V_data_V_1_sel = ap_const_logic_1)) then 
            axis_dst_V_data_V_1_data_out <= axis_dst_V_data_V_1_payload_B;
        else 
            axis_dst_V_data_V_1_data_out <= axis_dst_V_data_V_1_payload_A;
        end if; 
    end process;

    axis_dst_V_data_V_1_load_A <= (not(axis_dst_V_data_V_1_sel_wr) and axis_dst_V_data_V_1_state_cmp_full);
    axis_dst_V_data_V_1_load_B <= (axis_dst_V_data_V_1_state_cmp_full and axis_dst_V_data_V_1_sel_wr);
    axis_dst_V_data_V_1_sel <= axis_dst_V_data_V_1_sel_rd;
    axis_dst_V_data_V_1_state_cmp_full <= '0' when (axis_dst_V_data_V_1_state = ap_const_lv2_1) else '1';

    axis_dst_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_59_i_reg_216, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_59_i_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            axis_dst_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dst_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dst_V_data_V_1_vld_out <= axis_dst_V_data_V_1_state(0);
    axis_dst_V_dest_V_1_ack_in <= axis_dst_V_dest_V_1_state(1);
    axis_dst_V_dest_V_1_ack_out <= axis_out_TREADY;
    axis_dst_V_dest_V_1_data_out <= ap_const_lv1_0;
    axis_dst_V_dest_V_1_sel <= axis_dst_V_dest_V_1_sel_rd;

    axis_dst_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_59_i_reg_216, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_59_i_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            axis_dst_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dst_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dst_V_dest_V_1_vld_out <= axis_dst_V_dest_V_1_state(0);
    axis_dst_V_id_V_1_ack_in <= axis_dst_V_id_V_1_state(1);
    axis_dst_V_id_V_1_ack_out <= axis_out_TREADY;
    axis_dst_V_id_V_1_data_out <= ap_const_lv1_0;
    axis_dst_V_id_V_1_sel <= axis_dst_V_id_V_1_sel_rd;

    axis_dst_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_59_i_reg_216, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_59_i_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            axis_dst_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dst_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dst_V_id_V_1_vld_out <= axis_dst_V_id_V_1_state(0);
    axis_dst_V_keep_V_1_ack_in <= axis_dst_V_keep_V_1_state(1);
    axis_dst_V_keep_V_1_ack_out <= axis_out_TREADY;
    axis_dst_V_keep_V_1_data_out <= ap_const_lv1_0;
    axis_dst_V_keep_V_1_sel <= axis_dst_V_keep_V_1_sel_rd;

    axis_dst_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_59_i_reg_216, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_59_i_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            axis_dst_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dst_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dst_V_keep_V_1_vld_out <= axis_dst_V_keep_V_1_state(0);
    axis_dst_V_last_V_1_ack_in <= axis_dst_V_last_V_1_state(1);
    axis_dst_V_last_V_1_ack_out <= axis_out_TREADY;

    axis_dst_V_last_V_1_data_out_assign_proc : process(axis_dst_V_last_V_1_payload_A, axis_dst_V_last_V_1_payload_B, axis_dst_V_last_V_1_sel)
    begin
        if ((axis_dst_V_last_V_1_sel = ap_const_logic_1)) then 
            axis_dst_V_last_V_1_data_out <= axis_dst_V_last_V_1_payload_B;
        else 
            axis_dst_V_last_V_1_data_out <= axis_dst_V_last_V_1_payload_A;
        end if; 
    end process;

    axis_dst_V_last_V_1_load_A <= (not(axis_dst_V_last_V_1_sel_wr) and axis_dst_V_last_V_1_state_cmp_full);
    axis_dst_V_last_V_1_load_B <= (axis_dst_V_last_V_1_state_cmp_full and axis_dst_V_last_V_1_sel_wr);
    axis_dst_V_last_V_1_sel <= axis_dst_V_last_V_1_sel_rd;
    axis_dst_V_last_V_1_state_cmp_full <= '0' when (axis_dst_V_last_V_1_state = ap_const_lv2_1) else '1';

    axis_dst_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_59_i_reg_216, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_59_i_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            axis_dst_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dst_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dst_V_last_V_1_vld_out <= axis_dst_V_last_V_1_state(0);
    axis_dst_V_strb_V_1_ack_in <= axis_dst_V_strb_V_1_state(1);
    axis_dst_V_strb_V_1_ack_out <= axis_out_TREADY;
    axis_dst_V_strb_V_1_data_out <= ap_const_lv1_0;
    axis_dst_V_strb_V_1_sel <= axis_dst_V_strb_V_1_sel_rd;

    axis_dst_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_59_i_reg_216, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_59_i_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            axis_dst_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dst_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dst_V_strb_V_1_vld_out <= axis_dst_V_strb_V_1_state(0);
    axis_dst_V_user_V_1_ack_in <= axis_dst_V_user_V_1_state(1);
    axis_dst_V_user_V_1_ack_out <= axis_out_TREADY;

    axis_dst_V_user_V_1_data_out_assign_proc : process(axis_dst_V_user_V_1_payload_A, axis_dst_V_user_V_1_payload_B, axis_dst_V_user_V_1_sel)
    begin
        if ((axis_dst_V_user_V_1_sel = ap_const_logic_1)) then 
            axis_dst_V_user_V_1_data_out <= axis_dst_V_user_V_1_payload_B;
        else 
            axis_dst_V_user_V_1_data_out <= axis_dst_V_user_V_1_payload_A;
        end if; 
    end process;

    axis_dst_V_user_V_1_load_A <= (not(axis_dst_V_user_V_1_sel_wr) and axis_dst_V_user_V_1_state_cmp_full);
    axis_dst_V_user_V_1_load_B <= (axis_dst_V_user_V_1_state_cmp_full and axis_dst_V_user_V_1_sel_wr);
    axis_dst_V_user_V_1_sel <= axis_dst_V_user_V_1_sel_rd;
    axis_dst_V_user_V_1_state_cmp_full <= '0' when (axis_dst_V_user_V_1_state = ap_const_lv2_1) else '1';

    axis_dst_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_59_i_reg_216, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_59_i_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            axis_dst_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dst_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dst_V_user_V_1_vld_out <= axis_dst_V_user_V_1_state(0);
    axis_out_TDATA <= axis_dst_V_data_V_1_data_out;

    axis_out_TDATA_blk_n_assign_proc : process(axis_dst_V_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_59_i_reg_216, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_59_i_reg_216)
    begin
        if ((((ap_reg_pp0_iter1_tmp_59_i_reg_216 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((tmp_59_i_reg_216 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            axis_out_TDATA_blk_n <= axis_dst_V_data_V_1_state(1);
        else 
            axis_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_out_TDEST <= axis_dst_V_dest_V_1_data_out;
    axis_out_TID <= axis_dst_V_id_V_1_data_out;
    axis_out_TKEEP <= axis_dst_V_keep_V_1_data_out;
    axis_out_TLAST <= axis_dst_V_last_V_1_data_out;
    axis_out_TSTRB <= axis_dst_V_strb_V_1_data_out;
    axis_out_TUSER <= axis_dst_V_user_V_1_data_out;
    axis_out_TVALID <= axis_dst_V_dest_V_1_state(0);

    fifo7_blk_n_assign_proc : process(fifo7_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_59_i_reg_216)
    begin
        if (((tmp_59_i_reg_216 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo7_blk_n <= fifo7_empty_n;
        else 
            fifo7_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo7_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_59_i_reg_216, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_59_i_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo7_read <= ap_const_logic_1;
        else 
            fifo7_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_14_fu_179_p3 <= xi_i_reg_134(10 downto 10);
    tmp_3_fu_173_p2 <= (yi_i_reg_122 or tmp_fu_169_p1);
    tmp_59_i_fu_157_p2 <= "1" when (xi_i_reg_134 = ap_const_lv11_500) else "0";
    tmp_62_i_fu_187_p3 <= (tmp_14_fu_179_p3 & tmp_3_fu_173_p2);
    tmp_fu_169_p1 <= xi_i_reg_134(10 - 1 downto 0);
    tmp_i_fu_145_p2 <= "1" when (yi_i_reg_122 = ap_const_lv10_2D0) else "0";
    tmp_last_V_fu_201_p2 <= "1" when (xi_i_reg_134 = ap_const_lv11_4FF) else "0";
    tmp_user_V_fu_195_p2 <= "1" when (tmp_62_i_fu_187_p3 = ap_const_lv11_0) else "0";
    xi_fu_163_p2 <= std_logic_vector(unsigned(xi_i_reg_134) + unsigned(ap_const_lv11_1));
    yi_fu_151_p2 <= std_logic_vector(unsigned(yi_i_reg_122) + unsigned(ap_const_lv10_1));
end behav;
